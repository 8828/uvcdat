# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _gui
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import _gui as cppModule

import core
VISUS_LEFT_MOUSE = _gui.VISUS_LEFT_MOUSE
VISUS_MIDDLE_MOUSE = _gui.VISUS_MIDDLE_MOUSE
VISUS_RIGHT_MOUSE = _gui.VISUS_RIGHT_MOUSE
VISUS_THREE_MOUSE = _gui.VISUS_THREE_MOUSE
VISUS_FOUR_MOUSE = _gui.VISUS_FOUR_MOUSE
VISUS_FIVE_MOUSE = _gui.VISUS_FIVE_MOUSE
VISUS_MOUSE_DOWN = _gui.VISUS_MOUSE_DOWN
VISUS_MOUSE_UP = _gui.VISUS_MOUSE_UP
VISUS_SHIFT = _gui.VISUS_SHIFT
VISUS_CAPS = _gui.VISUS_CAPS
VISUS_CTRL = _gui.VISUS_CTRL
VISUS_ALT = _gui.VISUS_ALT
VISUS_NUM = _gui.VISUS_NUM
VISUS_META = _gui.VISUS_META
VISUS_MODIFIER_MASK = _gui.VISUS_MODIFIER_MASK
class VisusGuiBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusGuiBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusGuiBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _gui.delete_VisusGuiBase
    __del__ = lambda self : None;
    def getRoot(*args): return _gui.VisusGuiBase_getRoot(*args)
    def setRoot(*args): return _gui.VisusGuiBase_setRoot(*args)
    def setFocus(*args): return _gui.VisusGuiBase_setFocus(*args)
    def initOpenGL(*args): return _gui.VisusGuiBase_initOpenGL(*args)
    def display(*args): return _gui.VisusGuiBase_display(*args)
    def redisplay(*args): return _gui.VisusGuiBase_redisplay(*args)
    def swapBuffers(*args): return _gui.VisusGuiBase_swapBuffers(*args)
    def mouse(*args): return _gui.VisusGuiBase_mouse(*args)
    def motion(*args): return _gui.VisusGuiBase_motion(*args)
    def keyboard(*args): return _gui.VisusGuiBase_keyboard(*args)
    def modifier(*args): return _gui.VisusGuiBase_modifier(*args)
VisusGuiBase_swigregister = _gui.VisusGuiBase_swigregister
VisusGuiBase_swigregister(VisusGuiBase)

class VisusFLTKWindow(VisusGuiBase):
    __swig_setmethods__ = {}
    for _s in [VisusGuiBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusFLTKWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusGuiBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusFLTKWindow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gui.new_VisusFLTKWindow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gui.delete_VisusFLTKWindow
    __del__ = lambda self : None;
    def draw(*args): return _gui.VisusFLTKWindow_draw(*args)
    def handle(*args): return _gui.VisusFLTKWindow_handle(*args)
    def redisplay(*args): return _gui.VisusFLTKWindow_redisplay(*args)
    def swapBuffers(*args): return _gui.VisusFLTKWindow_swapBuffers(*args)
    def modifier(*args): return _gui.VisusFLTKWindow_modifier(*args)
    def keyboard(*args): return _gui.VisusFLTKWindow_keyboard(*args)
    def destroy(*args): return _gui.VisusFLTKWindow_destroy(*args)
    def cycleThroughBackgroundColors(*args): return _gui.VisusFLTKWindow_cycleThroughBackgroundColors(*args)
    def backgroundColor(*args): return _gui.VisusFLTKWindow_backgroundColor(*args)
VisusFLTKWindow_swigregister = _gui.VisusFLTKWindow_swigregister
VisusFLTKWindow_swigregister(VisusFLTKWindow)

class VisusFLTKGui(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusFLTKGui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusFLTKGui, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gui.new_VisusFLTKGui(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gui.delete_VisusFLTKGui
    __del__ = lambda self : None;
    def createWindow(*args): return _gui.VisusFLTKGui_createWindow(*args)
    def window(*args): return _gui.VisusFLTKGui_window(*args)
    def mainLoop(*args): return _gui.VisusFLTKGui_mainLoop(*args)
    def update(*args): return _gui.VisusFLTKGui_update(*args)
VisusFLTKGui_swigregister = _gui.VisusFLTKGui_swigregister
VisusFLTKGui_swigregister(VisusFLTKGui)

class VisusFLTKMaster(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusFLTKMaster, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusFLTKMaster, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gui.new_VisusFLTKMaster(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gui.delete_VisusFLTKMaster
    __del__ = lambda self : None;
    def mainloop(*args): return _gui.VisusFLTKMaster_mainloop(*args)
    def processMessages(*args): return _gui.VisusFLTKMaster_processMessages(*args)
    def destroyInactive(*args): return _gui.VisusFLTKMaster_destroyInactive(*args)
VisusFLTKMaster_swigregister = _gui.VisusFLTKMaster_swigregister
VisusFLTKMaster_swigregister(VisusFLTKMaster)

class VisusFLTKThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusFLTKThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusFLTKThread, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gui.new_VisusFLTKThread(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gui.delete_VisusFLTKThread
    __del__ = lambda self : None;
    def createWindow(*args): return _gui.VisusFLTKThread_createWindow(*args)
    def isActive(*args): return _gui.VisusFLTKThread_isActive(*args)
    def initThread(*args): return _gui.VisusFLTKThread_initThread(*args)
    def runInBackground(*args): return _gui.VisusFLTKThread_runInBackground(*args)
VisusFLTKThread_swigregister = _gui.VisusFLTKThread_swigregister
VisusFLTKThread_swigregister(VisusFLTKThread)

gVisusGuiMaster = VisusFLTKGui()
try: 
  import gui_support # See whether the vcdat gui is running
except:
  pass

def createWindow(root):
  global gVisusGuiMaster

  window = gVisusGuiMaster.createWindow(root)

  # If this is the first active window we create 
  if (window == 0):
    try: 
      # If vcdat is running we attch ourself to the tkinter mainloop  
      gui_support.root().after_idle(_fltkIdle,gVisusGuiMaster) 
        
    except: # If vcdat is not running
      pass

  return gVisusGuiMaster.window(window)

def _fltkIdle(master_gui):

  active = master_gui.update();
  gui_support.root().update_idletasks()
  gui_support.root().update()

  if active:
    gui_support.root().after_idle(_fltkIdle,master_gui)
        

def startFLTKMainLoop():
  """
This function will start the fltk main loop. It allows to use pyvisus
from python in a standalone fashion. Note that this function will only
return once all pyvisus windows are closed. Furthermore, the mainloop
must be run from the main thread of the program as it will not process
events correctly when running in a child process.
"""
  
  gVisusGuiMaster.mainLoop()
  return

  if gui_support.root_exists():      
    gui_support.root().mainloop()
  else: 
    gVisusGuiMaster.mainLoop()

  
#
# This is code that works great without vcdat but not with :-(
#_gVisusGuiMaster = VisusFLTKThread()
#_gVisusGuiMaster.runInBackground()
#  
# 
#def createWindow(root):
#  global _gVisusGuiMaster
#
#  _gVisusGuiMaster.createWindow(root)
#
#def _fltkIdle(master_gui):
#
#  active = master_gui.update();
#  gui_support.root().update_idletasks()
#  gui_support.root().update()
#
#  if active:
#    gui_support.root().after_idle(_fltkIdle,master_gui)
#       
#
  



