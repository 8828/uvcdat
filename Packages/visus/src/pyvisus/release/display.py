# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _display
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import _display as cppModule

import core
class VisusEarthNode(core.VisusGroup,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusEarthNode, name, value)
    __swig_getmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusEarthNode, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def resolution(*args): return _display.VisusEarthNode_resolution(*args)
    def periodic(*args): return _display.VisusEarthNode_periodic(*args)
    def connectHeight(*args): return _display.VisusEarthNode_connectHeight(*args)
    def connectTexture(*args): return _display.VisusEarthNode_connectTexture(*args)
    def loadHeight(*args): return _display.VisusEarthNode_loadHeight(*args)
    def loadTexture(*args): return _display.VisusEarthNode_loadTexture(*args)
    def synchronize(*args): return _display.VisusEarthNode_synchronize(*args)
    def setGeometryScaling(*args): return _display.VisusEarthNode_setGeometryScaling(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusEarthNode_construct
    if _newclass:construct = staticmethod(_display.VisusEarthNode_construct)
    def nodeType(*args): return _display.VisusEarthNode_nodeType(*args)
VisusEarthNode_swigregister = _display.VisusEarthNode_swigregister
VisusEarthNode_swigregister(VisusEarthNode)
cvar = _display.cvar
VisusEarthNode.sDefaultSlices = _display.cvar.VisusEarthNode_sDefaultSlices
VisusEarthNode.sDefaultStacks = _display.cvar.VisusEarthNode_sDefaultStacks
VisusEarthNode.sDefaultGeometryScaling = _display.cvar.VisusEarthNode_sDefaultGeometryScaling
VisusEarthNode_construct = _display.VisusEarthNode_construct

class pVisusEarthNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusEarthNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusEarthNode, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusEarthNode
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusEarthNode___eq__(*args)
    def __ne__(*args): return _display.pVisusEarthNode___ne__(*args)
    def __ref__(*args): return _display.pVisusEarthNode___ref__(*args)
    def __deref__(*args): return _display.pVisusEarthNode___deref__(*args)
    def getString(*args): return _display.pVisusEarthNode_getString(*args)
    def isEmpty(*args): return _display.pVisusEarthNode_isEmpty(*args)
    def assign(*args): return _display.pVisusEarthNode_assign(*args)
    __swig_getmethods__["sDefaultSlices"] = _display.pVisusEarthNode_sDefaultSlices_get
    if _newclass:sDefaultSlices = _swig_property(_display.pVisusEarthNode_sDefaultSlices_get)
    __swig_getmethods__["sDefaultStacks"] = _display.pVisusEarthNode_sDefaultStacks_get
    if _newclass:sDefaultStacks = _swig_property(_display.pVisusEarthNode_sDefaultStacks_get)
    __swig_getmethods__["sDefaultGeometryScaling"] = _display.pVisusEarthNode_sDefaultGeometryScaling_get
    if _newclass:sDefaultGeometryScaling = _swig_property(_display.pVisusEarthNode_sDefaultGeometryScaling_get)
    def resolution(*args): return _display.pVisusEarthNode_resolution(*args)
    def periodic(*args): return _display.pVisusEarthNode_periodic(*args)
    def connectHeight(*args): return _display.pVisusEarthNode_connectHeight(*args)
    def connectTexture(*args): return _display.pVisusEarthNode_connectTexture(*args)
    def loadHeight(*args): return _display.pVisusEarthNode_loadHeight(*args)
    def loadTexture(*args): return _display.pVisusEarthNode_loadTexture(*args)
    def synchronize(*args): return _display.pVisusEarthNode_synchronize(*args)
    def setGeometryScaling(*args): return _display.pVisusEarthNode_setGeometryScaling(*args)
    def construct(*args): return _display.pVisusEarthNode_construct(*args)
    def nodeType(*args): return _display.pVisusEarthNode_nodeType(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusEarthNode_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusEarthNode_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusEarthNode_XML_TAG_get, _display.pVisusEarthNode_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusEarthNode_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusEarthNode_sNumTypes_get)
    def numTypes(*args): return _display.pVisusEarthNode_numTypes(*args)
    def locked(*args): return _display.pVisusEarthNode_locked(*args)
    def lockToRead(*args): return _display.pVisusEarthNode_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusEarthNode_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusEarthNode_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusEarthNode_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusEarthNode_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusEarthNode_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusEarthNode_sRenderMode_get, _display.pVisusEarthNode_sRenderMode_set)
    def __and__(*args): return _display.pVisusEarthNode___and__(*args)
    def infoString(*args): return _display.pVisusEarthNode_infoString(*args)
    def self(*args): return _display.pVisusEarthNode_self(*args)
    def parent(*args): return _display.pVisusEarthNode_parent(*args)
    def nrOfChildren(*args): return _display.pVisusEarthNode_nrOfChildren(*args)
    def child(*args): return _display.pVisusEarthNode_child(*args)
    def getChildIndex(*args): return _display.pVisusEarthNode_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusEarthNode_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusEarthNode_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusEarthNode_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusEarthNode_nextNode(*args)
    def screenShot(*args): return _display.pVisusEarthNode_screenShot(*args)
    def type(*args): return _display.pVisusEarthNode_type(*args)
    def category(*args): return _display.pVisusEarthNode_category(*args)
    def drawBoundingBox(*args): return _display.pVisusEarthNode_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusEarthNode_visible(*args)
    def hasSharedValue(*args): return _display.pVisusEarthNode_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusEarthNode_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusEarthNode_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusEarthNode_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusEarthNode_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusEarthNode_isDirty(*args)
    def declareParameter(*args): return _display.pVisusEarthNode_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusEarthNode_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusEarthNode_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusEarthNode_getValue(*args)
    def setValue(*args): return _display.pVisusEarthNode_setValue(*args)
    def accumulate2D(*args): return _display.pVisusEarthNode_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusEarthNode_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusEarthNode_mapToWorldBox(*args)
    def rotate(*args): return _display.pVisusEarthNode_rotate(*args)
    def translate(*args): return _display.pVisusEarthNode_translate(*args)
    def scale(*args): return _display.pVisusEarthNode_scale(*args)
    def freeze(*args): return _display.pVisusEarthNode_freeze(*args)
    def unfreeze(*args): return _display.pVisusEarthNode_unfreeze(*args)
    def frozen(*args): return _display.pVisusEarthNode_frozen(*args)
    def display(*args): return _display.pVisusEarthNode_display(*args)
    def displayBoundingBox(*args): return _display.pVisusEarthNode_displayBoundingBox(*args)
    def validateXML(*args): return _display.pVisusEarthNode_validateXML(*args)
    def connect(*args): return _display.pVisusEarthNode_connect(*args)
    def loadData(*args): return _display.pVisusEarthNode_loadData(*args)
    def isConnected(*args): return _display.pVisusEarthNode_isConnected(*args)
pVisusEarthNode_swigregister = _display.pVisusEarthNode_swigregister
pVisusEarthNode_swigregister(pVisusEarthNode)

class VisusMeshDisplay(core.VisusGroup,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusMeshDisplay, name, value)
    __swig_getmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusMeshDisplay, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def normalIndex(*args): return _display.VisusMeshDisplay_normalIndex(*args)
    def colorIndex(*args): return _display.VisusMeshDisplay_colorIndex(*args)
    def polygonMode(*args): return _display.VisusMeshDisplay_polygonMode(*args)
    def freeze(*args): return _display.VisusMeshDisplay_freeze(*args)
    def connectInput(*args): return _display.VisusMeshDisplay_connectInput(*args)
    def loadData(*args): return _display.VisusMeshDisplay_loadData(*args)
    def minValue(*args): return _display.VisusMeshDisplay_minValue(*args)
    def maxValue(*args): return _display.VisusMeshDisplay_maxValue(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusMeshDisplay_construct
    if _newclass:construct = staticmethod(_display.VisusMeshDisplay_construct)
    def nodeType(*args): return _display.VisusMeshDisplay_nodeType(*args)
VisusMeshDisplay_swigregister = _display.VisusMeshDisplay_swigregister
VisusMeshDisplay_swigregister(VisusMeshDisplay)
VisusMeshDisplay_construct = _display.VisusMeshDisplay_construct

class pVisusMeshDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusMeshDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusMeshDisplay, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusMeshDisplay
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusMeshDisplay___eq__(*args)
    def __ne__(*args): return _display.pVisusMeshDisplay___ne__(*args)
    def __ref__(*args): return _display.pVisusMeshDisplay___ref__(*args)
    def __deref__(*args): return _display.pVisusMeshDisplay___deref__(*args)
    def getString(*args): return _display.pVisusMeshDisplay_getString(*args)
    def isEmpty(*args): return _display.pVisusMeshDisplay_isEmpty(*args)
    def assign(*args): return _display.pVisusMeshDisplay_assign(*args)
    def normalIndex(*args): return _display.pVisusMeshDisplay_normalIndex(*args)
    def colorIndex(*args): return _display.pVisusMeshDisplay_colorIndex(*args)
    def polygonMode(*args): return _display.pVisusMeshDisplay_polygonMode(*args)
    def freeze(*args): return _display.pVisusMeshDisplay_freeze(*args)
    def connectInput(*args): return _display.pVisusMeshDisplay_connectInput(*args)
    def loadData(*args): return _display.pVisusMeshDisplay_loadData(*args)
    def minValue(*args): return _display.pVisusMeshDisplay_minValue(*args)
    def maxValue(*args): return _display.pVisusMeshDisplay_maxValue(*args)
    def construct(*args): return _display.pVisusMeshDisplay_construct(*args)
    def nodeType(*args): return _display.pVisusMeshDisplay_nodeType(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusMeshDisplay_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusMeshDisplay_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusMeshDisplay_XML_TAG_get, _display.pVisusMeshDisplay_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusMeshDisplay_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusMeshDisplay_sNumTypes_get)
    def numTypes(*args): return _display.pVisusMeshDisplay_numTypes(*args)
    def locked(*args): return _display.pVisusMeshDisplay_locked(*args)
    def lockToRead(*args): return _display.pVisusMeshDisplay_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusMeshDisplay_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusMeshDisplay_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusMeshDisplay_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusMeshDisplay_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusMeshDisplay_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusMeshDisplay_sRenderMode_get, _display.pVisusMeshDisplay_sRenderMode_set)
    def __and__(*args): return _display.pVisusMeshDisplay___and__(*args)
    def infoString(*args): return _display.pVisusMeshDisplay_infoString(*args)
    def self(*args): return _display.pVisusMeshDisplay_self(*args)
    def parent(*args): return _display.pVisusMeshDisplay_parent(*args)
    def nrOfChildren(*args): return _display.pVisusMeshDisplay_nrOfChildren(*args)
    def child(*args): return _display.pVisusMeshDisplay_child(*args)
    def getChildIndex(*args): return _display.pVisusMeshDisplay_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusMeshDisplay_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusMeshDisplay_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusMeshDisplay_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusMeshDisplay_nextNode(*args)
    def screenShot(*args): return _display.pVisusMeshDisplay_screenShot(*args)
    def type(*args): return _display.pVisusMeshDisplay_type(*args)
    def category(*args): return _display.pVisusMeshDisplay_category(*args)
    def drawBoundingBox(*args): return _display.pVisusMeshDisplay_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusMeshDisplay_visible(*args)
    def hasSharedValue(*args): return _display.pVisusMeshDisplay_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusMeshDisplay_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusMeshDisplay_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusMeshDisplay_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusMeshDisplay_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusMeshDisplay_isDirty(*args)
    def declareParameter(*args): return _display.pVisusMeshDisplay_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusMeshDisplay_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusMeshDisplay_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusMeshDisplay_getValue(*args)
    def setValue(*args): return _display.pVisusMeshDisplay_setValue(*args)
    def accumulate2D(*args): return _display.pVisusMeshDisplay_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusMeshDisplay_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusMeshDisplay_mapToWorldBox(*args)
    def rotate(*args): return _display.pVisusMeshDisplay_rotate(*args)
    def translate(*args): return _display.pVisusMeshDisplay_translate(*args)
    def scale(*args): return _display.pVisusMeshDisplay_scale(*args)
    def unfreeze(*args): return _display.pVisusMeshDisplay_unfreeze(*args)
    def frozen(*args): return _display.pVisusMeshDisplay_frozen(*args)
    def display(*args): return _display.pVisusMeshDisplay_display(*args)
    def displayBoundingBox(*args): return _display.pVisusMeshDisplay_displayBoundingBox(*args)
    def validateXML(*args): return _display.pVisusMeshDisplay_validateXML(*args)
    def synchronize(*args): return _display.pVisusMeshDisplay_synchronize(*args)
    def connect(*args): return _display.pVisusMeshDisplay_connect(*args)
    def isConnected(*args): return _display.pVisusMeshDisplay_isConnected(*args)
pVisusMeshDisplay_swigregister = _display.pVisusMeshDisplay_swigregister
pVisusMeshDisplay_swigregister(pVisusMeshDisplay)

class VisusIndexedDisplay(core.VisusGroup,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusIndexedDisplay, name, value)
    __swig_getmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusIndexedDisplay, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def infoString(*args): return _display.VisusIndexedDisplay_infoString(*args)
    def normalIndex(*args): return _display.VisusIndexedDisplay_normalIndex(*args)
    def colorIndex(*args): return _display.VisusIndexedDisplay_colorIndex(*args)
    def polygonMode(*args): return _display.VisusIndexedDisplay_polygonMode(*args)
    def enableLighting(*args): return _display.VisusIndexedDisplay_enableLighting(*args)
    def geometryPrimitive(*args): return _display.VisusIndexedDisplay_geometryPrimitive(*args)
    def freeze(*args): return _display.VisusIndexedDisplay_freeze(*args)
    def connectInput(*args): return _display.VisusIndexedDisplay_connectInput(*args)
    def loadData(*args): return _display.VisusIndexedDisplay_loadData(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusIndexedDisplay_construct
    if _newclass:construct = staticmethod(_display.VisusIndexedDisplay_construct)
    def nodeType(*args): return _display.VisusIndexedDisplay_nodeType(*args)
VisusIndexedDisplay_swigregister = _display.VisusIndexedDisplay_swigregister
VisusIndexedDisplay_swigregister(VisusIndexedDisplay)
VisusIndexedDisplay_construct = _display.VisusIndexedDisplay_construct

class pVisusIndexedDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusIndexedDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusIndexedDisplay, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusIndexedDisplay
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusIndexedDisplay___eq__(*args)
    def __ne__(*args): return _display.pVisusIndexedDisplay___ne__(*args)
    def __ref__(*args): return _display.pVisusIndexedDisplay___ref__(*args)
    def __deref__(*args): return _display.pVisusIndexedDisplay___deref__(*args)
    def getString(*args): return _display.pVisusIndexedDisplay_getString(*args)
    def isEmpty(*args): return _display.pVisusIndexedDisplay_isEmpty(*args)
    def assign(*args): return _display.pVisusIndexedDisplay_assign(*args)
    def infoString(*args): return _display.pVisusIndexedDisplay_infoString(*args)
    def normalIndex(*args): return _display.pVisusIndexedDisplay_normalIndex(*args)
    def colorIndex(*args): return _display.pVisusIndexedDisplay_colorIndex(*args)
    def polygonMode(*args): return _display.pVisusIndexedDisplay_polygonMode(*args)
    def enableLighting(*args): return _display.pVisusIndexedDisplay_enableLighting(*args)
    def geometryPrimitive(*args): return _display.pVisusIndexedDisplay_geometryPrimitive(*args)
    def freeze(*args): return _display.pVisusIndexedDisplay_freeze(*args)
    def connectInput(*args): return _display.pVisusIndexedDisplay_connectInput(*args)
    def loadData(*args): return _display.pVisusIndexedDisplay_loadData(*args)
    def construct(*args): return _display.pVisusIndexedDisplay_construct(*args)
    def nodeType(*args): return _display.pVisusIndexedDisplay_nodeType(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusIndexedDisplay_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusIndexedDisplay_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusIndexedDisplay_XML_TAG_get, _display.pVisusIndexedDisplay_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusIndexedDisplay_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusIndexedDisplay_sNumTypes_get)
    def numTypes(*args): return _display.pVisusIndexedDisplay_numTypes(*args)
    def locked(*args): return _display.pVisusIndexedDisplay_locked(*args)
    def lockToRead(*args): return _display.pVisusIndexedDisplay_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusIndexedDisplay_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusIndexedDisplay_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusIndexedDisplay_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusIndexedDisplay_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusIndexedDisplay_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusIndexedDisplay_sRenderMode_get, _display.pVisusIndexedDisplay_sRenderMode_set)
    def __and__(*args): return _display.pVisusIndexedDisplay___and__(*args)
    def self(*args): return _display.pVisusIndexedDisplay_self(*args)
    def parent(*args): return _display.pVisusIndexedDisplay_parent(*args)
    def nrOfChildren(*args): return _display.pVisusIndexedDisplay_nrOfChildren(*args)
    def child(*args): return _display.pVisusIndexedDisplay_child(*args)
    def getChildIndex(*args): return _display.pVisusIndexedDisplay_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusIndexedDisplay_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusIndexedDisplay_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusIndexedDisplay_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusIndexedDisplay_nextNode(*args)
    def screenShot(*args): return _display.pVisusIndexedDisplay_screenShot(*args)
    def type(*args): return _display.pVisusIndexedDisplay_type(*args)
    def category(*args): return _display.pVisusIndexedDisplay_category(*args)
    def drawBoundingBox(*args): return _display.pVisusIndexedDisplay_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusIndexedDisplay_visible(*args)
    def hasSharedValue(*args): return _display.pVisusIndexedDisplay_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusIndexedDisplay_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusIndexedDisplay_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusIndexedDisplay_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusIndexedDisplay_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusIndexedDisplay_isDirty(*args)
    def declareParameter(*args): return _display.pVisusIndexedDisplay_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusIndexedDisplay_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusIndexedDisplay_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusIndexedDisplay_getValue(*args)
    def setValue(*args): return _display.pVisusIndexedDisplay_setValue(*args)
    def accumulate2D(*args): return _display.pVisusIndexedDisplay_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusIndexedDisplay_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusIndexedDisplay_mapToWorldBox(*args)
    def rotate(*args): return _display.pVisusIndexedDisplay_rotate(*args)
    def translate(*args): return _display.pVisusIndexedDisplay_translate(*args)
    def scale(*args): return _display.pVisusIndexedDisplay_scale(*args)
    def unfreeze(*args): return _display.pVisusIndexedDisplay_unfreeze(*args)
    def frozen(*args): return _display.pVisusIndexedDisplay_frozen(*args)
    def display(*args): return _display.pVisusIndexedDisplay_display(*args)
    def displayBoundingBox(*args): return _display.pVisusIndexedDisplay_displayBoundingBox(*args)
    def validateXML(*args): return _display.pVisusIndexedDisplay_validateXML(*args)
    def synchronize(*args): return _display.pVisusIndexedDisplay_synchronize(*args)
    def connect(*args): return _display.pVisusIndexedDisplay_connect(*args)
    def isConnected(*args): return _display.pVisusIndexedDisplay_isConnected(*args)
pVisusIndexedDisplay_swigregister = _display.pVisusIndexedDisplay_swigregister
pVisusIndexedDisplay_swigregister(pVisusIndexedDisplay)

class VisusOrthogonalSlice(core.VisusGroup,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusOrthogonalSlice, name, value)
    __swig_getmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusOrthogonalSlice, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def infoString(*args): return _display.VisusOrthogonalSlice_infoString(*args)
    def orientation(*args): return _display.VisusOrthogonalSlice_orientation(*args)
    def rotateRequest(*args): return _display.VisusOrthogonalSlice_rotateRequest(*args)
    def translateRequest(*args): return _display.VisusOrthogonalSlice_translateRequest(*args)
    def shiftRequest(*args): return _display.VisusOrthogonalSlice_shiftRequest(*args)
    def connectInput(*args): return _display.VisusOrthogonalSlice_connectInput(*args)
    def freeze(*args): return _display.VisusOrthogonalSlice_freeze(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusOrthogonalSlice_construct
    if _newclass:construct = staticmethod(_display.VisusOrthogonalSlice_construct)
    def nodeType(*args): return _display.VisusOrthogonalSlice_nodeType(*args)
VisusOrthogonalSlice_swigregister = _display.VisusOrthogonalSlice_swigregister
VisusOrthogonalSlice_swigregister(VisusOrthogonalSlice)
VisusOrthogonalSlice_construct = _display.VisusOrthogonalSlice_construct

class pVisusOrthogonalSlice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusOrthogonalSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusOrthogonalSlice, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusOrthogonalSlice
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusOrthogonalSlice___eq__(*args)
    def __ne__(*args): return _display.pVisusOrthogonalSlice___ne__(*args)
    def __ref__(*args): return _display.pVisusOrthogonalSlice___ref__(*args)
    def __deref__(*args): return _display.pVisusOrthogonalSlice___deref__(*args)
    def getString(*args): return _display.pVisusOrthogonalSlice_getString(*args)
    def isEmpty(*args): return _display.pVisusOrthogonalSlice_isEmpty(*args)
    def assign(*args): return _display.pVisusOrthogonalSlice_assign(*args)
    def infoString(*args): return _display.pVisusOrthogonalSlice_infoString(*args)
    def orientation(*args): return _display.pVisusOrthogonalSlice_orientation(*args)
    def rotateRequest(*args): return _display.pVisusOrthogonalSlice_rotateRequest(*args)
    def translateRequest(*args): return _display.pVisusOrthogonalSlice_translateRequest(*args)
    def shiftRequest(*args): return _display.pVisusOrthogonalSlice_shiftRequest(*args)
    def connectInput(*args): return _display.pVisusOrthogonalSlice_connectInput(*args)
    def freeze(*args): return _display.pVisusOrthogonalSlice_freeze(*args)
    def construct(*args): return _display.pVisusOrthogonalSlice_construct(*args)
    def nodeType(*args): return _display.pVisusOrthogonalSlice_nodeType(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusOrthogonalSlice_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusOrthogonalSlice_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusOrthogonalSlice_XML_TAG_get, _display.pVisusOrthogonalSlice_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusOrthogonalSlice_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusOrthogonalSlice_sNumTypes_get)
    def numTypes(*args): return _display.pVisusOrthogonalSlice_numTypes(*args)
    def locked(*args): return _display.pVisusOrthogonalSlice_locked(*args)
    def lockToRead(*args): return _display.pVisusOrthogonalSlice_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusOrthogonalSlice_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusOrthogonalSlice_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusOrthogonalSlice_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusOrthogonalSlice_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusOrthogonalSlice_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusOrthogonalSlice_sRenderMode_get, _display.pVisusOrthogonalSlice_sRenderMode_set)
    def __and__(*args): return _display.pVisusOrthogonalSlice___and__(*args)
    def self(*args): return _display.pVisusOrthogonalSlice_self(*args)
    def parent(*args): return _display.pVisusOrthogonalSlice_parent(*args)
    def nrOfChildren(*args): return _display.pVisusOrthogonalSlice_nrOfChildren(*args)
    def child(*args): return _display.pVisusOrthogonalSlice_child(*args)
    def getChildIndex(*args): return _display.pVisusOrthogonalSlice_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusOrthogonalSlice_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusOrthogonalSlice_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusOrthogonalSlice_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusOrthogonalSlice_nextNode(*args)
    def screenShot(*args): return _display.pVisusOrthogonalSlice_screenShot(*args)
    def type(*args): return _display.pVisusOrthogonalSlice_type(*args)
    def category(*args): return _display.pVisusOrthogonalSlice_category(*args)
    def drawBoundingBox(*args): return _display.pVisusOrthogonalSlice_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusOrthogonalSlice_visible(*args)
    def hasSharedValue(*args): return _display.pVisusOrthogonalSlice_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusOrthogonalSlice_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusOrthogonalSlice_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusOrthogonalSlice_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusOrthogonalSlice_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusOrthogonalSlice_isDirty(*args)
    def declareParameter(*args): return _display.pVisusOrthogonalSlice_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusOrthogonalSlice_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusOrthogonalSlice_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusOrthogonalSlice_getValue(*args)
    def setValue(*args): return _display.pVisusOrthogonalSlice_setValue(*args)
    def accumulate2D(*args): return _display.pVisusOrthogonalSlice_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusOrthogonalSlice_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusOrthogonalSlice_mapToWorldBox(*args)
    def rotate(*args): return _display.pVisusOrthogonalSlice_rotate(*args)
    def translate(*args): return _display.pVisusOrthogonalSlice_translate(*args)
    def scale(*args): return _display.pVisusOrthogonalSlice_scale(*args)
    def unfreeze(*args): return _display.pVisusOrthogonalSlice_unfreeze(*args)
    def frozen(*args): return _display.pVisusOrthogonalSlice_frozen(*args)
    def display(*args): return _display.pVisusOrthogonalSlice_display(*args)
    def displayBoundingBox(*args): return _display.pVisusOrthogonalSlice_displayBoundingBox(*args)
    def validateXML(*args): return _display.pVisusOrthogonalSlice_validateXML(*args)
    def synchronize(*args): return _display.pVisusOrthogonalSlice_synchronize(*args)
    def connect(*args): return _display.pVisusOrthogonalSlice_connect(*args)
    def loadData(*args): return _display.pVisusOrthogonalSlice_loadData(*args)
    def isConnected(*args): return _display.pVisusOrthogonalSlice_isConnected(*args)
pVisusOrthogonalSlice_swigregister = _display.pVisusOrthogonalSlice_swigregister
pVisusOrthogonalSlice_swigregister(pVisusOrthogonalSlice)

class VisusRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusRenderer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _display.new_VisusRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _display.delete_VisusRenderer
    __del__ = lambda self : None;
    def render(*args): return _display.VisusRenderer_render(*args)
    def write(*args): return _display.VisusRenderer_write(*args)
    def isValid(*args): return _display.VisusRenderer_isValid(*args)
    def makeCurrent(*args): return _display.VisusRenderer_makeCurrent(*args)
    def revertPrevious(*args): return _display.VisusRenderer_revertPrevious(*args)
VisusRenderer_swigregister = _display.VisusRenderer_swigregister
VisusRenderer_swigregister(VisusRenderer)

class VisusTextureViewer(core.VisusGroup,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusTextureViewer, name, value)
    __swig_getmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusTextureViewer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def orientation(*args): return _display.VisusTextureViewer_orientation(*args)
    def pipPosition(*args): return _display.VisusTextureViewer_pipPosition(*args)
    def pipSize(*args): return _display.VisusTextureViewer_pipSize(*args)
    def pipColor(*args): return _display.VisusTextureViewer_pipColor(*args)
    def rotate(*args): return _display.VisusTextureViewer_rotate(*args)
    def translate(*args): return _display.VisusTextureViewer_translate(*args)
    def rotateRequest(*args): return _display.VisusTextureViewer_rotateRequest(*args)
    def translateRequest(*args): return _display.VisusTextureViewer_translateRequest(*args)
    def connectInput(*args): return _display.VisusTextureViewer_connectInput(*args)
    def displayBoundingBox(*args): return _display.VisusTextureViewer_displayBoundingBox(*args)
    def display(*args): return _display.VisusTextureViewer_display(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusTextureViewer_construct
    if _newclass:construct = staticmethod(_display.VisusTextureViewer_construct)
    def nodeType(*args): return _display.VisusTextureViewer_nodeType(*args)
VisusTextureViewer_swigregister = _display.VisusTextureViewer_swigregister
VisusTextureViewer_swigregister(VisusTextureViewer)
VisusTextureViewer_construct = _display.VisusTextureViewer_construct

class pVisusTextureViewer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusTextureViewer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusTextureViewer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusTextureViewer
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusTextureViewer___eq__(*args)
    def __ne__(*args): return _display.pVisusTextureViewer___ne__(*args)
    def __ref__(*args): return _display.pVisusTextureViewer___ref__(*args)
    def __deref__(*args): return _display.pVisusTextureViewer___deref__(*args)
    def getString(*args): return _display.pVisusTextureViewer_getString(*args)
    def isEmpty(*args): return _display.pVisusTextureViewer_isEmpty(*args)
    def assign(*args): return _display.pVisusTextureViewer_assign(*args)
    def orientation(*args): return _display.pVisusTextureViewer_orientation(*args)
    def pipPosition(*args): return _display.pVisusTextureViewer_pipPosition(*args)
    def pipSize(*args): return _display.pVisusTextureViewer_pipSize(*args)
    def pipColor(*args): return _display.pVisusTextureViewer_pipColor(*args)
    def rotate(*args): return _display.pVisusTextureViewer_rotate(*args)
    def translate(*args): return _display.pVisusTextureViewer_translate(*args)
    def rotateRequest(*args): return _display.pVisusTextureViewer_rotateRequest(*args)
    def translateRequest(*args): return _display.pVisusTextureViewer_translateRequest(*args)
    def connectInput(*args): return _display.pVisusTextureViewer_connectInput(*args)
    def displayBoundingBox(*args): return _display.pVisusTextureViewer_displayBoundingBox(*args)
    def display(*args): return _display.pVisusTextureViewer_display(*args)
    def construct(*args): return _display.pVisusTextureViewer_construct(*args)
    def nodeType(*args): return _display.pVisusTextureViewer_nodeType(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusTextureViewer_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusTextureViewer_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusTextureViewer_XML_TAG_get, _display.pVisusTextureViewer_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusTextureViewer_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusTextureViewer_sNumTypes_get)
    def numTypes(*args): return _display.pVisusTextureViewer_numTypes(*args)
    def locked(*args): return _display.pVisusTextureViewer_locked(*args)
    def lockToRead(*args): return _display.pVisusTextureViewer_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusTextureViewer_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusTextureViewer_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusTextureViewer_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusTextureViewer_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusTextureViewer_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusTextureViewer_sRenderMode_get, _display.pVisusTextureViewer_sRenderMode_set)
    def __and__(*args): return _display.pVisusTextureViewer___and__(*args)
    def infoString(*args): return _display.pVisusTextureViewer_infoString(*args)
    def self(*args): return _display.pVisusTextureViewer_self(*args)
    def parent(*args): return _display.pVisusTextureViewer_parent(*args)
    def nrOfChildren(*args): return _display.pVisusTextureViewer_nrOfChildren(*args)
    def child(*args): return _display.pVisusTextureViewer_child(*args)
    def getChildIndex(*args): return _display.pVisusTextureViewer_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusTextureViewer_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusTextureViewer_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusTextureViewer_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusTextureViewer_nextNode(*args)
    def screenShot(*args): return _display.pVisusTextureViewer_screenShot(*args)
    def type(*args): return _display.pVisusTextureViewer_type(*args)
    def category(*args): return _display.pVisusTextureViewer_category(*args)
    def drawBoundingBox(*args): return _display.pVisusTextureViewer_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusTextureViewer_visible(*args)
    def hasSharedValue(*args): return _display.pVisusTextureViewer_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusTextureViewer_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusTextureViewer_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusTextureViewer_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusTextureViewer_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusTextureViewer_isDirty(*args)
    def declareParameter(*args): return _display.pVisusTextureViewer_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusTextureViewer_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusTextureViewer_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusTextureViewer_getValue(*args)
    def setValue(*args): return _display.pVisusTextureViewer_setValue(*args)
    def accumulate2D(*args): return _display.pVisusTextureViewer_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusTextureViewer_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusTextureViewer_mapToWorldBox(*args)
    def scale(*args): return _display.pVisusTextureViewer_scale(*args)
    def freeze(*args): return _display.pVisusTextureViewer_freeze(*args)
    def unfreeze(*args): return _display.pVisusTextureViewer_unfreeze(*args)
    def frozen(*args): return _display.pVisusTextureViewer_frozen(*args)
    def validateXML(*args): return _display.pVisusTextureViewer_validateXML(*args)
    def synchronize(*args): return _display.pVisusTextureViewer_synchronize(*args)
    def connect(*args): return _display.pVisusTextureViewer_connect(*args)
    def loadData(*args): return _display.pVisusTextureViewer_loadData(*args)
    def isConnected(*args): return _display.pVisusTextureViewer_isConnected(*args)
pVisusTextureViewer_swigregister = _display.pVisusTextureViewer_swigregister
pVisusTextureViewer_swigregister(pVisusTextureViewer)

class VisusGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusGraph, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def unitLength(*args): return _display.VisusGraph_unitLength(*args)
    def xUnits(*args): return _display.VisusGraph_xUnits(*args)
    def yUnits(*args): return _display.VisusGraph_yUnits(*args)
VisusGraph_swigregister = _display.VisusGraph_swigregister
VisusGraph_swigregister(VisusGraph)

def createGraphData(numPoints):
    from core import VectorInt
    from data import VisusBlockData, PV_FLOAT32
    dims = VectorInt(3)
    dims[0] = numPoints 
    dims[1] = 2
    dims[2] = 1

    data = VisusBlockData()
    data.samples(dims)
    data.dataType(PV_FLOAT32)
    data.reserveSpace()
    return data


class VisusHistogram(VisusGraph,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [VisusGraph,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusHistogram, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusGraph,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusHistogram, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def barColor(*args): return _display.VisusHistogram_barColor(*args)
    def barFill(*args): return _display.VisusHistogram_barFill(*args)
    def barWidth(*args): return _display.VisusHistogram_barWidth(*args)
    def autoAdjustMinMax(*args): return _display.VisusHistogram_autoAdjustMinMax(*args)
    def evenDistribution(*args): return _display.VisusHistogram_evenDistribution(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusHistogram_construct
    if _newclass:construct = staticmethod(_display.VisusHistogram_construct)
    def nodeType(*args): return _display.VisusHistogram_nodeType(*args)
VisusHistogram_swigregister = _display.VisusHistogram_swigregister
VisusHistogram_swigregister(VisusHistogram)
VisusHistogram_construct = _display.VisusHistogram_construct

class pVisusHistogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusHistogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusHistogram, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusHistogram
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusHistogram___eq__(*args)
    def __ne__(*args): return _display.pVisusHistogram___ne__(*args)
    def __ref__(*args): return _display.pVisusHistogram___ref__(*args)
    def __deref__(*args): return _display.pVisusHistogram___deref__(*args)
    def getString(*args): return _display.pVisusHistogram_getString(*args)
    def isEmpty(*args): return _display.pVisusHistogram_isEmpty(*args)
    def assign(*args): return _display.pVisusHistogram_assign(*args)
    def barColor(*args): return _display.pVisusHistogram_barColor(*args)
    def barFill(*args): return _display.pVisusHistogram_barFill(*args)
    def barWidth(*args): return _display.pVisusHistogram_barWidth(*args)
    def autoAdjustMinMax(*args): return _display.pVisusHistogram_autoAdjustMinMax(*args)
    def evenDistribution(*args): return _display.pVisusHistogram_evenDistribution(*args)
    def construct(*args): return _display.pVisusHistogram_construct(*args)
    def nodeType(*args): return _display.pVisusHistogram_nodeType(*args)
    def unitLength(*args): return _display.pVisusHistogram_unitLength(*args)
    def xUnits(*args): return _display.pVisusHistogram_xUnits(*args)
    def yUnits(*args): return _display.pVisusHistogram_yUnits(*args)
    def orientation(*args): return _display.pVisusHistogram_orientation(*args)
    def position(*args): return _display.pVisusHistogram_position(*args)
    def axis(*args): return _display.pVisusHistogram_axis(*args)
    def rotate(*args): return _display.pVisusHistogram_rotate(*args)
    def translate(*args): return _display.pVisusHistogram_translate(*args)
    def backgroundColor(*args): return _display.pVisusHistogram_backgroundColor(*args)
    def tickLineType(*args): return _display.pVisusHistogram_tickLineType(*args)
    def titleText(*args): return _display.pVisusHistogram_titleText(*args)
    def titleFont(*args): return _display.pVisusHistogram_titleFont(*args)
    def titleAlignment(*args): return _display.pVisusHistogram_titleAlignment(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusHistogram_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusHistogram_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusHistogram_XML_TAG_get, _display.pVisusHistogram_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusHistogram_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusHistogram_sNumTypes_get)
    def numTypes(*args): return _display.pVisusHistogram_numTypes(*args)
    def locked(*args): return _display.pVisusHistogram_locked(*args)
    def lockToRead(*args): return _display.pVisusHistogram_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusHistogram_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusHistogram_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusHistogram_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusHistogram_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusHistogram_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusHistogram_sRenderMode_get, _display.pVisusHistogram_sRenderMode_set)
    def __and__(*args): return _display.pVisusHistogram___and__(*args)
    def infoString(*args): return _display.pVisusHistogram_infoString(*args)
    def self(*args): return _display.pVisusHistogram_self(*args)
    def parent(*args): return _display.pVisusHistogram_parent(*args)
    def nrOfChildren(*args): return _display.pVisusHistogram_nrOfChildren(*args)
    def child(*args): return _display.pVisusHistogram_child(*args)
    def getChildIndex(*args): return _display.pVisusHistogram_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusHistogram_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusHistogram_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusHistogram_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusHistogram_nextNode(*args)
    def screenShot(*args): return _display.pVisusHistogram_screenShot(*args)
    def type(*args): return _display.pVisusHistogram_type(*args)
    def category(*args): return _display.pVisusHistogram_category(*args)
    def drawBoundingBox(*args): return _display.pVisusHistogram_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusHistogram_visible(*args)
    def hasSharedValue(*args): return _display.pVisusHistogram_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusHistogram_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusHistogram_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusHistogram_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusHistogram_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusHistogram_isDirty(*args)
    def declareParameter(*args): return _display.pVisusHistogram_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusHistogram_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusHistogram_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusHistogram_getValue(*args)
    def setValue(*args): return _display.pVisusHistogram_setValue(*args)
    def accumulate2D(*args): return _display.pVisusHistogram_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusHistogram_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusHistogram_mapToWorldBox(*args)
    def scale(*args): return _display.pVisusHistogram_scale(*args)
    def freeze(*args): return _display.pVisusHistogram_freeze(*args)
    def unfreeze(*args): return _display.pVisusHistogram_unfreeze(*args)
    def frozen(*args): return _display.pVisusHistogram_frozen(*args)
    def display(*args): return _display.pVisusHistogram_display(*args)
    def displayBoundingBox(*args): return _display.pVisusHistogram_displayBoundingBox(*args)
    def validateXML(*args): return _display.pVisusHistogram_validateXML(*args)
    def synchronize(*args): return _display.pVisusHistogram_synchronize(*args)
    def connect(*args): return _display.pVisusHistogram_connect(*args)
    def loadData(*args): return _display.pVisusHistogram_loadData(*args)
    def isConnected(*args): return _display.pVisusHistogram_isConnected(*args)
pVisusHistogram_swigregister = _display.pVisusHistogram_swigregister
pVisusHistogram_swigregister(pVisusHistogram)

class VisusLineGraph(VisusGraph,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [VisusGraph,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusLineGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusGraph,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusLineGraph, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def numberOfLines(*args): return _display.VisusLineGraph_numberOfLines(*args)
    def pointSize(*args): return _display.VisusLineGraph_pointSize(*args)
    def lineColor(*args): return _display.VisusLineGraph_lineColor(*args)
    def lineWidth(*args): return _display.VisusLineGraph_lineWidth(*args)
    def autoAdjustMinMax(*args): return _display.VisusLineGraph_autoAdjustMinMax(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusLineGraph_construct
    if _newclass:construct = staticmethod(_display.VisusLineGraph_construct)
    def nodeType(*args): return _display.VisusLineGraph_nodeType(*args)
VisusLineGraph_swigregister = _display.VisusLineGraph_swigregister
VisusLineGraph_swigregister(VisusLineGraph)
VisusLineGraph_construct = _display.VisusLineGraph_construct

class pVisusLineGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusLineGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusLineGraph, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusLineGraph
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusLineGraph___eq__(*args)
    def __ne__(*args): return _display.pVisusLineGraph___ne__(*args)
    def __ref__(*args): return _display.pVisusLineGraph___ref__(*args)
    def __deref__(*args): return _display.pVisusLineGraph___deref__(*args)
    def getString(*args): return _display.pVisusLineGraph_getString(*args)
    def isEmpty(*args): return _display.pVisusLineGraph_isEmpty(*args)
    def assign(*args): return _display.pVisusLineGraph_assign(*args)
    def numberOfLines(*args): return _display.pVisusLineGraph_numberOfLines(*args)
    def pointSize(*args): return _display.pVisusLineGraph_pointSize(*args)
    def lineColor(*args): return _display.pVisusLineGraph_lineColor(*args)
    def lineWidth(*args): return _display.pVisusLineGraph_lineWidth(*args)
    def autoAdjustMinMax(*args): return _display.pVisusLineGraph_autoAdjustMinMax(*args)
    def construct(*args): return _display.pVisusLineGraph_construct(*args)
    def nodeType(*args): return _display.pVisusLineGraph_nodeType(*args)
    def unitLength(*args): return _display.pVisusLineGraph_unitLength(*args)
    def xUnits(*args): return _display.pVisusLineGraph_xUnits(*args)
    def yUnits(*args): return _display.pVisusLineGraph_yUnits(*args)
    def orientation(*args): return _display.pVisusLineGraph_orientation(*args)
    def position(*args): return _display.pVisusLineGraph_position(*args)
    def axis(*args): return _display.pVisusLineGraph_axis(*args)
    def rotate(*args): return _display.pVisusLineGraph_rotate(*args)
    def translate(*args): return _display.pVisusLineGraph_translate(*args)
    def backgroundColor(*args): return _display.pVisusLineGraph_backgroundColor(*args)
    def tickLineType(*args): return _display.pVisusLineGraph_tickLineType(*args)
    def titleText(*args): return _display.pVisusLineGraph_titleText(*args)
    def titleFont(*args): return _display.pVisusLineGraph_titleFont(*args)
    def titleAlignment(*args): return _display.pVisusLineGraph_titleAlignment(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusLineGraph_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusLineGraph_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusLineGraph_XML_TAG_get, _display.pVisusLineGraph_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusLineGraph_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusLineGraph_sNumTypes_get)
    def numTypes(*args): return _display.pVisusLineGraph_numTypes(*args)
    def locked(*args): return _display.pVisusLineGraph_locked(*args)
    def lockToRead(*args): return _display.pVisusLineGraph_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusLineGraph_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusLineGraph_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusLineGraph_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusLineGraph_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusLineGraph_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusLineGraph_sRenderMode_get, _display.pVisusLineGraph_sRenderMode_set)
    def __and__(*args): return _display.pVisusLineGraph___and__(*args)
    def infoString(*args): return _display.pVisusLineGraph_infoString(*args)
    def self(*args): return _display.pVisusLineGraph_self(*args)
    def parent(*args): return _display.pVisusLineGraph_parent(*args)
    def nrOfChildren(*args): return _display.pVisusLineGraph_nrOfChildren(*args)
    def child(*args): return _display.pVisusLineGraph_child(*args)
    def getChildIndex(*args): return _display.pVisusLineGraph_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusLineGraph_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusLineGraph_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusLineGraph_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusLineGraph_nextNode(*args)
    def screenShot(*args): return _display.pVisusLineGraph_screenShot(*args)
    def type(*args): return _display.pVisusLineGraph_type(*args)
    def category(*args): return _display.pVisusLineGraph_category(*args)
    def drawBoundingBox(*args): return _display.pVisusLineGraph_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusLineGraph_visible(*args)
    def hasSharedValue(*args): return _display.pVisusLineGraph_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusLineGraph_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusLineGraph_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusLineGraph_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusLineGraph_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusLineGraph_isDirty(*args)
    def declareParameter(*args): return _display.pVisusLineGraph_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusLineGraph_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusLineGraph_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusLineGraph_getValue(*args)
    def setValue(*args): return _display.pVisusLineGraph_setValue(*args)
    def accumulate2D(*args): return _display.pVisusLineGraph_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusLineGraph_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusLineGraph_mapToWorldBox(*args)
    def scale(*args): return _display.pVisusLineGraph_scale(*args)
    def freeze(*args): return _display.pVisusLineGraph_freeze(*args)
    def unfreeze(*args): return _display.pVisusLineGraph_unfreeze(*args)
    def frozen(*args): return _display.pVisusLineGraph_frozen(*args)
    def display(*args): return _display.pVisusLineGraph_display(*args)
    def displayBoundingBox(*args): return _display.pVisusLineGraph_displayBoundingBox(*args)
    def validateXML(*args): return _display.pVisusLineGraph_validateXML(*args)
    def synchronize(*args): return _display.pVisusLineGraph_synchronize(*args)
    def connect(*args): return _display.pVisusLineGraph_connect(*args)
    def loadData(*args): return _display.pVisusLineGraph_loadData(*args)
    def isConnected(*args): return _display.pVisusLineGraph_isConnected(*args)
pVisusLineGraph_swigregister = _display.pVisusLineGraph_swigregister
pVisusLineGraph_swigregister(pVisusLineGraph)

HF_HEIGHT = _display.HF_HEIGHT
HF_COLOR = _display.HF_COLOR
class VisusHeightField(core.VisusGroup,core.VisusConsumer):
    __swig_setmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusHeightField, name, value)
    __swig_getmethods__ = {}
    for _s in [core.VisusGroup,core.VisusConsumer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusHeightField, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def orientation(*args): return _display.VisusHeightField_orientation(*args)
    def rotate(*args): return _display.VisusHeightField_rotate(*args)
    def translate(*args): return _display.VisusHeightField_translate(*args)
    def rotateRequest(*args): return _display.VisusHeightField_rotateRequest(*args)
    def translateRequest(*args): return _display.VisusHeightField_translateRequest(*args)
    def shiftRequest(*args): return _display.VisusHeightField_shiftRequest(*args)
    def connectHeight(*args): return _display.VisusHeightField_connectHeight(*args)
    def connectColor(*args): return _display.VisusHeightField_connectColor(*args)
    def displayBoundingBox(*args): return _display.VisusHeightField_displayBoundingBox(*args)
    __swig_getmethods__["construct"] = lambda x: _display.VisusHeightField_construct
    if _newclass:construct = staticmethod(_display.VisusHeightField_construct)
    def nodeType(*args): return _display.VisusHeightField_nodeType(*args)
VisusHeightField_swigregister = _display.VisusHeightField_swigregister
VisusHeightField_swigregister(VisusHeightField)
VisusHeightField_construct = _display.VisusHeightField_construct

class pVisusHeightField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusHeightField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusHeightField, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _display.delete_pVisusHeightField
    __del__ = lambda self : None;
    def __eq__(*args): return _display.pVisusHeightField___eq__(*args)
    def __ne__(*args): return _display.pVisusHeightField___ne__(*args)
    def __ref__(*args): return _display.pVisusHeightField___ref__(*args)
    def __deref__(*args): return _display.pVisusHeightField___deref__(*args)
    def getString(*args): return _display.pVisusHeightField_getString(*args)
    def isEmpty(*args): return _display.pVisusHeightField_isEmpty(*args)
    def assign(*args): return _display.pVisusHeightField_assign(*args)
    def orientation(*args): return _display.pVisusHeightField_orientation(*args)
    def rotate(*args): return _display.pVisusHeightField_rotate(*args)
    def translate(*args): return _display.pVisusHeightField_translate(*args)
    def rotateRequest(*args): return _display.pVisusHeightField_rotateRequest(*args)
    def translateRequest(*args): return _display.pVisusHeightField_translateRequest(*args)
    def shiftRequest(*args): return _display.pVisusHeightField_shiftRequest(*args)
    def connectHeight(*args): return _display.pVisusHeightField_connectHeight(*args)
    def connectColor(*args): return _display.pVisusHeightField_connectColor(*args)
    def displayBoundingBox(*args): return _display.pVisusHeightField_displayBoundingBox(*args)
    def construct(*args): return _display.pVisusHeightField_construct(*args)
    def nodeType(*args): return _display.pVisusHeightField_nodeType(*args)
    __swig_setmethods__["XML_TAG"] = _display.pVisusHeightField_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _display.pVisusHeightField_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_display.pVisusHeightField_XML_TAG_get, _display.pVisusHeightField_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _display.pVisusHeightField_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_display.pVisusHeightField_sNumTypes_get)
    def numTypes(*args): return _display.pVisusHeightField_numTypes(*args)
    def locked(*args): return _display.pVisusHeightField_locked(*args)
    def lockToRead(*args): return _display.pVisusHeightField_lockToRead(*args)
    def unlockAfterRead(*args): return _display.pVisusHeightField_unlockAfterRead(*args)
    def lockToWrite(*args): return _display.pVisusHeightField_lockToWrite(*args)
    def unlockAfterWrite(*args): return _display.pVisusHeightField_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _display.pVisusHeightField_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _display.pVisusHeightField_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_display.pVisusHeightField_sRenderMode_get, _display.pVisusHeightField_sRenderMode_set)
    def __and__(*args): return _display.pVisusHeightField___and__(*args)
    def infoString(*args): return _display.pVisusHeightField_infoString(*args)
    def self(*args): return _display.pVisusHeightField_self(*args)
    def parent(*args): return _display.pVisusHeightField_parent(*args)
    def nrOfChildren(*args): return _display.pVisusHeightField_nrOfChildren(*args)
    def child(*args): return _display.pVisusHeightField_child(*args)
    def getChildIndex(*args): return _display.pVisusHeightField_getChildIndex(*args)
    def attachSubTree(*args): return _display.pVisusHeightField_attachSubTree(*args)
    def detachSubTree(*args): return _display.pVisusHeightField_detachSubTree(*args)
    def destroySubTree(*args): return _display.pVisusHeightField_destroySubTree(*args)
    def nextNode(*args): return _display.pVisusHeightField_nextNode(*args)
    def screenShot(*args): return _display.pVisusHeightField_screenShot(*args)
    def type(*args): return _display.pVisusHeightField_type(*args)
    def category(*args): return _display.pVisusHeightField_category(*args)
    def drawBoundingBox(*args): return _display.pVisusHeightField_drawBoundingBox(*args)
    def visible(*args): return _display.pVisusHeightField_visible(*args)
    def hasSharedValue(*args): return _display.pVisusHeightField_hasSharedValue(*args)
    def inherit(*args): return _display.pVisusHeightField_inherit(*args)
    def boundingBoxColor(*args): return _display.pVisusHeightField_boundingBoxColor(*args)
    def markAsDirty(*args): return _display.pVisusHeightField_markAsDirty(*args)
    def readClearDirty(*args): return _display.pVisusHeightField_readClearDirty(*args)
    def isDirty(*args): return _display.pVisusHeightField_isDirty(*args)
    def declareParameter(*args): return _display.pVisusHeightField_declareParameter(*args)
    def propagateUpwards(*args): return _display.pVisusHeightField_propagateUpwards(*args)
    def propagateDownwards(*args): return _display.pVisusHeightField_propagateDownwards(*args)
    def getValue(*args): return _display.pVisusHeightField_getValue(*args)
    def setValue(*args): return _display.pVisusHeightField_setValue(*args)
    def accumulate2D(*args): return _display.pVisusHeightField_accumulate2D(*args)
    def accumulate3D(*args): return _display.pVisusHeightField_accumulate3D(*args)
    def mapToWorldBox(*args): return _display.pVisusHeightField_mapToWorldBox(*args)
    def scale(*args): return _display.pVisusHeightField_scale(*args)
    def freeze(*args): return _display.pVisusHeightField_freeze(*args)
    def unfreeze(*args): return _display.pVisusHeightField_unfreeze(*args)
    def frozen(*args): return _display.pVisusHeightField_frozen(*args)
    def display(*args): return _display.pVisusHeightField_display(*args)
    def validateXML(*args): return _display.pVisusHeightField_validateXML(*args)
    def synchronize(*args): return _display.pVisusHeightField_synchronize(*args)
    def connect(*args): return _display.pVisusHeightField_connect(*args)
    def loadData(*args): return _display.pVisusHeightField_loadData(*args)
    def isConnected(*args): return _display.pVisusHeightField_isConnected(*args)
pVisusHeightField_swigregister = _display.pVisusHeightField_swigregister
pVisusHeightField_swigregister(pVisusHeightField)



