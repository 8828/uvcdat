# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _numpyconversion
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class VisusIncoreEncoder:
  def __init__(self, xdim, ydim, zdim, unit=0):
    self.xdim = xdim
    self.ydim = ydim
    self.zdim = zdim
    self.tdim = 1 
    self.unit = unit
    self.left = []
    self.right= []
    self.fields=[]
    return

  def domain(self, left=[], right=[]):
    if len(left) != 3:
       raise RuntimeError("Left lower corner of bounding box does not have 3 values") 
    if len(right) != 3:
       raise RuntimeError("Right upper corner of bounding box does not have 3 values") 
    self.left = left
    self.right = right
    return

  def field (self, data, name="Unknown"):
    if data is None:
       raise RuntimeError("Given data is None. Can not encode as field")
    fieldEncode = encodeArray(data,name,self.xdim,self.ydim,self.zdim,self.tdim)
    self.fields.append(fieldEncode)
    return

  def __str__(self):
    final = "Incore: %d %d %d %d %d" % (self.xdim,self.ydim,self.zdim,self.tdim,self.unit)
    if len(self.left) == 3 and len(self.right) == 3:
       final += " domain %f %f %f %f %f %f" % (self.left[0],self.left[1],self.left[2],self.right[0],self.right[1],self.right[2])

    for field in self.fields:
       final += " { %s }" % field
    return final


encodeArray = _numpyconversion.encodeArray
dumpArray = _numpyconversion.dumpArray
arrayPointer = _numpyconversion.arrayPointer
isCArray = _numpyconversion.isCArray


