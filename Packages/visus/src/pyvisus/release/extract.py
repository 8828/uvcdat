# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _extract
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import _extract as cppModule

import core
VISUS_EXTRACTION_STARTED = _extract.VISUS_EXTRACTION_STARTED
VISUS_EXTRACTION_REFINING = _extract.VISUS_EXTRACTION_REFINING
VISUS_EXTRACTION_FINISHED = _extract.VISUS_EXTRACTION_FINISHED
VISUS_EXTRACTION_INVALID = _extract.VISUS_EXTRACTION_INVALID
class VisusSampleExtractor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusSampleExtractor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusSampleExtractor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    sUpdateInterval = _extract.VisusSampleExtractor_sUpdateInterval
    __swig_destroy__ = _extract.delete_VisusSampleExtractor
    __del__ = lambda self : None;
    def status(*args): return _extract.VisusSampleExtractor_status(*args)
    def idle(*args): return _extract.VisusSampleExtractor_idle(*args)
VisusSampleExtractor_swigregister = _extract.VisusSampleExtractor_swigregister
VisusSampleExtractor_swigregister(VisusSampleExtractor)

class VisusAxisAlignedExtractor(core.VisusGroup,VisusSampleExtractor):
    __swig_setmethods__ = {}
    for _s in [core.VisusGroup,VisusSampleExtractor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusAxisAlignedExtractor, name, value)
    __swig_getmethods__ = {}
    for _s in [core.VisusGroup,VisusSampleExtractor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusAxisAlignedExtractor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def infoString(*args): return _extract.VisusAxisAlignedExtractor_infoString(*args)
    def dataSource(*args): return _extract.VisusAxisAlignedExtractor_dataSource(*args)
    def interrupt(*args): return _extract.VisusAxisAlignedExtractor_interrupt(*args)
    def rotateRequest(*args): return _extract.VisusAxisAlignedExtractor_rotateRequest(*args)
    def translateRequest(*args): return _extract.VisusAxisAlignedExtractor_translateRequest(*args)
    def displayBoundingBox(*args): return _extract.VisusAxisAlignedExtractor_displayBoundingBox(*args)
    def extractionLoop(*args): return _extract.VisusAxisAlignedExtractor_extractionLoop(*args)
    def produce(*args): return _extract.VisusAxisAlignedExtractor_produce(*args)
    def latestRequest(*args): return _extract.VisusAxisAlignedExtractor_latestRequest(*args)
    __swig_getmethods__["construct"] = lambda x: _extract.VisusAxisAlignedExtractor_construct
    if _newclass:construct = staticmethod(_extract.VisusAxisAlignedExtractor_construct)
    def nodeType(*args): return _extract.VisusAxisAlignedExtractor_nodeType(*args)
VisusAxisAlignedExtractor_swigregister = _extract.VisusAxisAlignedExtractor_swigregister
VisusAxisAlignedExtractor_swigregister(VisusAxisAlignedExtractor)
VisusAxisAlignedExtractor_construct = _extract.VisusAxisAlignedExtractor_construct

class pVisusAxisAlignedExtractor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusAxisAlignedExtractor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusAxisAlignedExtractor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _extract.delete_pVisusAxisAlignedExtractor
    __del__ = lambda self : None;
    def __eq__(*args): return _extract.pVisusAxisAlignedExtractor___eq__(*args)
    def __ne__(*args): return _extract.pVisusAxisAlignedExtractor___ne__(*args)
    def __ref__(*args): return _extract.pVisusAxisAlignedExtractor___ref__(*args)
    def __deref__(*args): return _extract.pVisusAxisAlignedExtractor___deref__(*args)
    def getString(*args): return _extract.pVisusAxisAlignedExtractor_getString(*args)
    def isEmpty(*args): return _extract.pVisusAxisAlignedExtractor_isEmpty(*args)
    def assign(*args): return _extract.pVisusAxisAlignedExtractor_assign(*args)
    def infoString(*args): return _extract.pVisusAxisAlignedExtractor_infoString(*args)
    def dataSource(*args): return _extract.pVisusAxisAlignedExtractor_dataSource(*args)
    def interrupt(*args): return _extract.pVisusAxisAlignedExtractor_interrupt(*args)
    def rotateRequest(*args): return _extract.pVisusAxisAlignedExtractor_rotateRequest(*args)
    def translateRequest(*args): return _extract.pVisusAxisAlignedExtractor_translateRequest(*args)
    def displayBoundingBox(*args): return _extract.pVisusAxisAlignedExtractor_displayBoundingBox(*args)
    def extractionLoop(*args): return _extract.pVisusAxisAlignedExtractor_extractionLoop(*args)
    def produce(*args): return _extract.pVisusAxisAlignedExtractor_produce(*args)
    def latestRequest(*args): return _extract.pVisusAxisAlignedExtractor_latestRequest(*args)
    def construct(*args): return _extract.pVisusAxisAlignedExtractor_construct(*args)
    def nodeType(*args): return _extract.pVisusAxisAlignedExtractor_nodeType(*args)
    __swig_setmethods__["XML_TAG"] = _extract.pVisusAxisAlignedExtractor_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _extract.pVisusAxisAlignedExtractor_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_extract.pVisusAxisAlignedExtractor_XML_TAG_get, _extract.pVisusAxisAlignedExtractor_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _extract.pVisusAxisAlignedExtractor_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_extract.pVisusAxisAlignedExtractor_sNumTypes_get)
    def numTypes(*args): return _extract.pVisusAxisAlignedExtractor_numTypes(*args)
    def locked(*args): return _extract.pVisusAxisAlignedExtractor_locked(*args)
    def lockToRead(*args): return _extract.pVisusAxisAlignedExtractor_lockToRead(*args)
    def unlockAfterRead(*args): return _extract.pVisusAxisAlignedExtractor_unlockAfterRead(*args)
    def lockToWrite(*args): return _extract.pVisusAxisAlignedExtractor_lockToWrite(*args)
    def unlockAfterWrite(*args): return _extract.pVisusAxisAlignedExtractor_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _extract.pVisusAxisAlignedExtractor_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _extract.pVisusAxisAlignedExtractor_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_extract.pVisusAxisAlignedExtractor_sRenderMode_get, _extract.pVisusAxisAlignedExtractor_sRenderMode_set)
    def __and__(*args): return _extract.pVisusAxisAlignedExtractor___and__(*args)
    def self(*args): return _extract.pVisusAxisAlignedExtractor_self(*args)
    def parent(*args): return _extract.pVisusAxisAlignedExtractor_parent(*args)
    def nrOfChildren(*args): return _extract.pVisusAxisAlignedExtractor_nrOfChildren(*args)
    def child(*args): return _extract.pVisusAxisAlignedExtractor_child(*args)
    def getChildIndex(*args): return _extract.pVisusAxisAlignedExtractor_getChildIndex(*args)
    def attachSubTree(*args): return _extract.pVisusAxisAlignedExtractor_attachSubTree(*args)
    def detachSubTree(*args): return _extract.pVisusAxisAlignedExtractor_detachSubTree(*args)
    def destroySubTree(*args): return _extract.pVisusAxisAlignedExtractor_destroySubTree(*args)
    def nextNode(*args): return _extract.pVisusAxisAlignedExtractor_nextNode(*args)
    def screenShot(*args): return _extract.pVisusAxisAlignedExtractor_screenShot(*args)
    def type(*args): return _extract.pVisusAxisAlignedExtractor_type(*args)
    def category(*args): return _extract.pVisusAxisAlignedExtractor_category(*args)
    def drawBoundingBox(*args): return _extract.pVisusAxisAlignedExtractor_drawBoundingBox(*args)
    def visible(*args): return _extract.pVisusAxisAlignedExtractor_visible(*args)
    def hasSharedValue(*args): return _extract.pVisusAxisAlignedExtractor_hasSharedValue(*args)
    def inherit(*args): return _extract.pVisusAxisAlignedExtractor_inherit(*args)
    def boundingBoxColor(*args): return _extract.pVisusAxisAlignedExtractor_boundingBoxColor(*args)
    def markAsDirty(*args): return _extract.pVisusAxisAlignedExtractor_markAsDirty(*args)
    def readClearDirty(*args): return _extract.pVisusAxisAlignedExtractor_readClearDirty(*args)
    def isDirty(*args): return _extract.pVisusAxisAlignedExtractor_isDirty(*args)
    def declareParameter(*args): return _extract.pVisusAxisAlignedExtractor_declareParameter(*args)
    def propagateUpwards(*args): return _extract.pVisusAxisAlignedExtractor_propagateUpwards(*args)
    def propagateDownwards(*args): return _extract.pVisusAxisAlignedExtractor_propagateDownwards(*args)
    def getValue(*args): return _extract.pVisusAxisAlignedExtractor_getValue(*args)
    def setValue(*args): return _extract.pVisusAxisAlignedExtractor_setValue(*args)
    def accumulate2D(*args): return _extract.pVisusAxisAlignedExtractor_accumulate2D(*args)
    def accumulate3D(*args): return _extract.pVisusAxisAlignedExtractor_accumulate3D(*args)
    def mapToWorldBox(*args): return _extract.pVisusAxisAlignedExtractor_mapToWorldBox(*args)
    def rotate(*args): return _extract.pVisusAxisAlignedExtractor_rotate(*args)
    def translate(*args): return _extract.pVisusAxisAlignedExtractor_translate(*args)
    def scale(*args): return _extract.pVisusAxisAlignedExtractor_scale(*args)
    def freeze(*args): return _extract.pVisusAxisAlignedExtractor_freeze(*args)
    def unfreeze(*args): return _extract.pVisusAxisAlignedExtractor_unfreeze(*args)
    def frozen(*args): return _extract.pVisusAxisAlignedExtractor_frozen(*args)
    def display(*args): return _extract.pVisusAxisAlignedExtractor_display(*args)
    def validateXML(*args): return _extract.pVisusAxisAlignedExtractor_validateXML(*args)
    def product(*args): return _extract.pVisusAxisAlignedExtractor_product(*args)
    def readLockProduct(*args): return _extract.pVisusAxisAlignedExtractor_readLockProduct(*args)
    def unlockProduct(*args): return _extract.pVisusAxisAlignedExtractor_unlockProduct(*args)
    def id(*args): return _extract.pVisusAxisAlignedExtractor_id(*args)
    __swig_getmethods__["sUpdateInterval"] = _extract.pVisusAxisAlignedExtractor_sUpdateInterval_get
    if _newclass:sUpdateInterval = _swig_property(_extract.pVisusAxisAlignedExtractor_sUpdateInterval_get)
    def status(*args): return _extract.pVisusAxisAlignedExtractor_status(*args)
    def idle(*args): return _extract.pVisusAxisAlignedExtractor_idle(*args)
pVisusAxisAlignedExtractor_swigregister = _extract.pVisusAxisAlignedExtractor_swigregister
pVisusAxisAlignedExtractor_swigregister(pVisusAxisAlignedExtractor)

class VisusIsoSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusIsoSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusIsoSurface, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def translationStyle(*args): return _extract.VisusIsoSurface_translationStyle(*args)
    def rotate(*args): return _extract.VisusIsoSurface_rotate(*args)
    def translate(*args): return _extract.VisusIsoSurface_translate(*args)
    def translateRequest(*args): return _extract.VisusIsoSurface_translateRequest(*args)
    def connectIso(*args): return _extract.VisusIsoSurface_connectIso(*args)
    def checkParameters(*args): return _extract.VisusIsoSurface_checkParameters(*args)
    def checkData(*args): return _extract.VisusIsoSurface_checkData(*args)
    def process(*args): return _extract.VisusIsoSurface_process(*args)
    def displayBoundingBox(*args): return _extract.VisusIsoSurface_displayBoundingBox(*args)
    __swig_getmethods__["construct"] = lambda x: _extract.VisusIsoSurface_construct
    if _newclass:construct = staticmethod(_extract.VisusIsoSurface_construct)
    def nodeType(*args): return _extract.VisusIsoSurface_nodeType(*args)
VisusIsoSurface_swigregister = _extract.VisusIsoSurface_swigregister
VisusIsoSurface_swigregister(VisusIsoSurface)
VisusIsoSurface_construct = _extract.VisusIsoSurface_construct

class pVisusIsoSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusIsoSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusIsoSurface, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _extract.delete_pVisusIsoSurface
    __del__ = lambda self : None;
    def __eq__(*args): return _extract.pVisusIsoSurface___eq__(*args)
    def __ne__(*args): return _extract.pVisusIsoSurface___ne__(*args)
    def __ref__(*args): return _extract.pVisusIsoSurface___ref__(*args)
    def __deref__(*args): return _extract.pVisusIsoSurface___deref__(*args)
    def getString(*args): return _extract.pVisusIsoSurface_getString(*args)
    def isEmpty(*args): return _extract.pVisusIsoSurface_isEmpty(*args)
    def assign(*args): return _extract.pVisusIsoSurface_assign(*args)
    def translationStyle(*args): return _extract.pVisusIsoSurface_translationStyle(*args)
    def rotate(*args): return _extract.pVisusIsoSurface_rotate(*args)
    def translate(*args): return _extract.pVisusIsoSurface_translate(*args)
    def translateRequest(*args): return _extract.pVisusIsoSurface_translateRequest(*args)
    def connectIso(*args): return _extract.pVisusIsoSurface_connectIso(*args)
    def checkParameters(*args): return _extract.pVisusIsoSurface_checkParameters(*args)
    def checkData(*args): return _extract.pVisusIsoSurface_checkData(*args)
    def process(*args): return _extract.pVisusIsoSurface_process(*args)
    def displayBoundingBox(*args): return _extract.pVisusIsoSurface_displayBoundingBox(*args)
    def construct(*args): return _extract.pVisusIsoSurface_construct(*args)
    def nodeType(*args): return _extract.pVisusIsoSurface_nodeType(*args)
    def processingMode(*args): return _extract.pVisusIsoSurface_processingMode(*args)
    def processThreadless(*args): return _extract.pVisusIsoSurface_processThreadless(*args)
    def latestRequest(*args): return _extract.pVisusIsoSurface_latestRequest(*args)
    __swig_setmethods__["XML_TAG"] = _extract.pVisusIsoSurface_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _extract.pVisusIsoSurface_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_extract.pVisusIsoSurface_XML_TAG_get, _extract.pVisusIsoSurface_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _extract.pVisusIsoSurface_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_extract.pVisusIsoSurface_sNumTypes_get)
    def numTypes(*args): return _extract.pVisusIsoSurface_numTypes(*args)
    def locked(*args): return _extract.pVisusIsoSurface_locked(*args)
    def lockToRead(*args): return _extract.pVisusIsoSurface_lockToRead(*args)
    def unlockAfterRead(*args): return _extract.pVisusIsoSurface_unlockAfterRead(*args)
    def lockToWrite(*args): return _extract.pVisusIsoSurface_lockToWrite(*args)
    def unlockAfterWrite(*args): return _extract.pVisusIsoSurface_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _extract.pVisusIsoSurface_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _extract.pVisusIsoSurface_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_extract.pVisusIsoSurface_sRenderMode_get, _extract.pVisusIsoSurface_sRenderMode_set)
    def __and__(*args): return _extract.pVisusIsoSurface___and__(*args)
    def infoString(*args): return _extract.pVisusIsoSurface_infoString(*args)
    def self(*args): return _extract.pVisusIsoSurface_self(*args)
    def parent(*args): return _extract.pVisusIsoSurface_parent(*args)
    def nrOfChildren(*args): return _extract.pVisusIsoSurface_nrOfChildren(*args)
    def child(*args): return _extract.pVisusIsoSurface_child(*args)
    def getChildIndex(*args): return _extract.pVisusIsoSurface_getChildIndex(*args)
    def attachSubTree(*args): return _extract.pVisusIsoSurface_attachSubTree(*args)
    def detachSubTree(*args): return _extract.pVisusIsoSurface_detachSubTree(*args)
    def destroySubTree(*args): return _extract.pVisusIsoSurface_destroySubTree(*args)
    def nextNode(*args): return _extract.pVisusIsoSurface_nextNode(*args)
    def screenShot(*args): return _extract.pVisusIsoSurface_screenShot(*args)
    def type(*args): return _extract.pVisusIsoSurface_type(*args)
    def category(*args): return _extract.pVisusIsoSurface_category(*args)
    def drawBoundingBox(*args): return _extract.pVisusIsoSurface_drawBoundingBox(*args)
    def visible(*args): return _extract.pVisusIsoSurface_visible(*args)
    def hasSharedValue(*args): return _extract.pVisusIsoSurface_hasSharedValue(*args)
    def inherit(*args): return _extract.pVisusIsoSurface_inherit(*args)
    def boundingBoxColor(*args): return _extract.pVisusIsoSurface_boundingBoxColor(*args)
    def markAsDirty(*args): return _extract.pVisusIsoSurface_markAsDirty(*args)
    def readClearDirty(*args): return _extract.pVisusIsoSurface_readClearDirty(*args)
    def isDirty(*args): return _extract.pVisusIsoSurface_isDirty(*args)
    def declareParameter(*args): return _extract.pVisusIsoSurface_declareParameter(*args)
    def propagateUpwards(*args): return _extract.pVisusIsoSurface_propagateUpwards(*args)
    def propagateDownwards(*args): return _extract.pVisusIsoSurface_propagateDownwards(*args)
    def getValue(*args): return _extract.pVisusIsoSurface_getValue(*args)
    def setValue(*args): return _extract.pVisusIsoSurface_setValue(*args)
    def accumulate2D(*args): return _extract.pVisusIsoSurface_accumulate2D(*args)
    def accumulate3D(*args): return _extract.pVisusIsoSurface_accumulate3D(*args)
    def mapToWorldBox(*args): return _extract.pVisusIsoSurface_mapToWorldBox(*args)
    def scale(*args): return _extract.pVisusIsoSurface_scale(*args)
    def freeze(*args): return _extract.pVisusIsoSurface_freeze(*args)
    def unfreeze(*args): return _extract.pVisusIsoSurface_unfreeze(*args)
    def frozen(*args): return _extract.pVisusIsoSurface_frozen(*args)
    def display(*args): return _extract.pVisusIsoSurface_display(*args)
    def validateXML(*args): return _extract.pVisusIsoSurface_validateXML(*args)
    def synchronize(*args): return _extract.pVisusIsoSurface_synchronize(*args)
    def connect(*args): return _extract.pVisusIsoSurface_connect(*args)
    def loadData(*args): return _extract.pVisusIsoSurface_loadData(*args)
    def isConnected(*args): return _extract.pVisusIsoSurface_isConnected(*args)
    def product(*args): return _extract.pVisusIsoSurface_product(*args)
    def produce(*args): return _extract.pVisusIsoSurface_produce(*args)
    def readLockProduct(*args): return _extract.pVisusIsoSurface_readLockProduct(*args)
    def unlockProduct(*args): return _extract.pVisusIsoSurface_unlockProduct(*args)
    def interrupt(*args): return _extract.pVisusIsoSurface_interrupt(*args)
    def id(*args): return _extract.pVisusIsoSurface_id(*args)
    __swig_getmethods__["sUpdateInterval"] = _extract.pVisusIsoSurface_sUpdateInterval_get
    if _newclass:sUpdateInterval = _swig_property(_extract.pVisusIsoSurface_sUpdateInterval_get)
    def status(*args): return _extract.pVisusIsoSurface_status(*args)
    def idle(*args): return _extract.pVisusIsoSurface_idle(*args)
pVisusIsoSurface_swigregister = _extract.pVisusIsoSurface_swigregister
pVisusIsoSurface_swigregister(pVisusIsoSurface)

CIS_ISO_DATA = _extract.CIS_ISO_DATA
CIS_COLOR_DATA = _extract.CIS_COLOR_DATA
class VisusColoredIsoSurface(VisusIsoSurface):
    __swig_setmethods__ = {}
    for _s in [VisusIsoSurface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusColoredIsoSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusIsoSurface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusColoredIsoSurface, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def connectColor(*args): return _extract.VisusColoredIsoSurface_connectColor(*args)
    def checkData(*args): return _extract.VisusColoredIsoSurface_checkData(*args)
    __swig_getmethods__["construct"] = lambda x: _extract.VisusColoredIsoSurface_construct
    if _newclass:construct = staticmethod(_extract.VisusColoredIsoSurface_construct)
    def nodeType(*args): return _extract.VisusColoredIsoSurface_nodeType(*args)
VisusColoredIsoSurface_swigregister = _extract.VisusColoredIsoSurface_swigregister
VisusColoredIsoSurface_swigregister(VisusColoredIsoSurface)
VisusColoredIsoSurface_construct = _extract.VisusColoredIsoSurface_construct

class pVisusColoredIsoSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusColoredIsoSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusColoredIsoSurface, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _extract.delete_pVisusColoredIsoSurface
    __del__ = lambda self : None;
    def __eq__(*args): return _extract.pVisusColoredIsoSurface___eq__(*args)
    def __ne__(*args): return _extract.pVisusColoredIsoSurface___ne__(*args)
    def __ref__(*args): return _extract.pVisusColoredIsoSurface___ref__(*args)
    def __deref__(*args): return _extract.pVisusColoredIsoSurface___deref__(*args)
    def getString(*args): return _extract.pVisusColoredIsoSurface_getString(*args)
    def isEmpty(*args): return _extract.pVisusColoredIsoSurface_isEmpty(*args)
    def assign(*args): return _extract.pVisusColoredIsoSurface_assign(*args)
    def connectColor(*args): return _extract.pVisusColoredIsoSurface_connectColor(*args)
    def checkData(*args): return _extract.pVisusColoredIsoSurface_checkData(*args)
    def construct(*args): return _extract.pVisusColoredIsoSurface_construct(*args)
    def nodeType(*args): return _extract.pVisusColoredIsoSurface_nodeType(*args)
    def translationStyle(*args): return _extract.pVisusColoredIsoSurface_translationStyle(*args)
    def rotate(*args): return _extract.pVisusColoredIsoSurface_rotate(*args)
    def translate(*args): return _extract.pVisusColoredIsoSurface_translate(*args)
    def translateRequest(*args): return _extract.pVisusColoredIsoSurface_translateRequest(*args)
    def connectIso(*args): return _extract.pVisusColoredIsoSurface_connectIso(*args)
    def checkParameters(*args): return _extract.pVisusColoredIsoSurface_checkParameters(*args)
    def process(*args): return _extract.pVisusColoredIsoSurface_process(*args)
    def displayBoundingBox(*args): return _extract.pVisusColoredIsoSurface_displayBoundingBox(*args)
    def processingMode(*args): return _extract.pVisusColoredIsoSurface_processingMode(*args)
    def processThreadless(*args): return _extract.pVisusColoredIsoSurface_processThreadless(*args)
    def latestRequest(*args): return _extract.pVisusColoredIsoSurface_latestRequest(*args)
    __swig_setmethods__["XML_TAG"] = _extract.pVisusColoredIsoSurface_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _extract.pVisusColoredIsoSurface_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_extract.pVisusColoredIsoSurface_XML_TAG_get, _extract.pVisusColoredIsoSurface_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _extract.pVisusColoredIsoSurface_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_extract.pVisusColoredIsoSurface_sNumTypes_get)
    def numTypes(*args): return _extract.pVisusColoredIsoSurface_numTypes(*args)
    def locked(*args): return _extract.pVisusColoredIsoSurface_locked(*args)
    def lockToRead(*args): return _extract.pVisusColoredIsoSurface_lockToRead(*args)
    def unlockAfterRead(*args): return _extract.pVisusColoredIsoSurface_unlockAfterRead(*args)
    def lockToWrite(*args): return _extract.pVisusColoredIsoSurface_lockToWrite(*args)
    def unlockAfterWrite(*args): return _extract.pVisusColoredIsoSurface_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _extract.pVisusColoredIsoSurface_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _extract.pVisusColoredIsoSurface_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_extract.pVisusColoredIsoSurface_sRenderMode_get, _extract.pVisusColoredIsoSurface_sRenderMode_set)
    def __and__(*args): return _extract.pVisusColoredIsoSurface___and__(*args)
    def infoString(*args): return _extract.pVisusColoredIsoSurface_infoString(*args)
    def self(*args): return _extract.pVisusColoredIsoSurface_self(*args)
    def parent(*args): return _extract.pVisusColoredIsoSurface_parent(*args)
    def nrOfChildren(*args): return _extract.pVisusColoredIsoSurface_nrOfChildren(*args)
    def child(*args): return _extract.pVisusColoredIsoSurface_child(*args)
    def getChildIndex(*args): return _extract.pVisusColoredIsoSurface_getChildIndex(*args)
    def attachSubTree(*args): return _extract.pVisusColoredIsoSurface_attachSubTree(*args)
    def detachSubTree(*args): return _extract.pVisusColoredIsoSurface_detachSubTree(*args)
    def destroySubTree(*args): return _extract.pVisusColoredIsoSurface_destroySubTree(*args)
    def nextNode(*args): return _extract.pVisusColoredIsoSurface_nextNode(*args)
    def screenShot(*args): return _extract.pVisusColoredIsoSurface_screenShot(*args)
    def type(*args): return _extract.pVisusColoredIsoSurface_type(*args)
    def category(*args): return _extract.pVisusColoredIsoSurface_category(*args)
    def drawBoundingBox(*args): return _extract.pVisusColoredIsoSurface_drawBoundingBox(*args)
    def visible(*args): return _extract.pVisusColoredIsoSurface_visible(*args)
    def hasSharedValue(*args): return _extract.pVisusColoredIsoSurface_hasSharedValue(*args)
    def inherit(*args): return _extract.pVisusColoredIsoSurface_inherit(*args)
    def boundingBoxColor(*args): return _extract.pVisusColoredIsoSurface_boundingBoxColor(*args)
    def markAsDirty(*args): return _extract.pVisusColoredIsoSurface_markAsDirty(*args)
    def readClearDirty(*args): return _extract.pVisusColoredIsoSurface_readClearDirty(*args)
    def isDirty(*args): return _extract.pVisusColoredIsoSurface_isDirty(*args)
    def declareParameter(*args): return _extract.pVisusColoredIsoSurface_declareParameter(*args)
    def propagateUpwards(*args): return _extract.pVisusColoredIsoSurface_propagateUpwards(*args)
    def propagateDownwards(*args): return _extract.pVisusColoredIsoSurface_propagateDownwards(*args)
    def getValue(*args): return _extract.pVisusColoredIsoSurface_getValue(*args)
    def setValue(*args): return _extract.pVisusColoredIsoSurface_setValue(*args)
    def accumulate2D(*args): return _extract.pVisusColoredIsoSurface_accumulate2D(*args)
    def accumulate3D(*args): return _extract.pVisusColoredIsoSurface_accumulate3D(*args)
    def mapToWorldBox(*args): return _extract.pVisusColoredIsoSurface_mapToWorldBox(*args)
    def scale(*args): return _extract.pVisusColoredIsoSurface_scale(*args)
    def freeze(*args): return _extract.pVisusColoredIsoSurface_freeze(*args)
    def unfreeze(*args): return _extract.pVisusColoredIsoSurface_unfreeze(*args)
    def frozen(*args): return _extract.pVisusColoredIsoSurface_frozen(*args)
    def display(*args): return _extract.pVisusColoredIsoSurface_display(*args)
    def validateXML(*args): return _extract.pVisusColoredIsoSurface_validateXML(*args)
    def synchronize(*args): return _extract.pVisusColoredIsoSurface_synchronize(*args)
    def connect(*args): return _extract.pVisusColoredIsoSurface_connect(*args)
    def loadData(*args): return _extract.pVisusColoredIsoSurface_loadData(*args)
    def isConnected(*args): return _extract.pVisusColoredIsoSurface_isConnected(*args)
    def product(*args): return _extract.pVisusColoredIsoSurface_product(*args)
    def produce(*args): return _extract.pVisusColoredIsoSurface_produce(*args)
    def readLockProduct(*args): return _extract.pVisusColoredIsoSurface_readLockProduct(*args)
    def unlockProduct(*args): return _extract.pVisusColoredIsoSurface_unlockProduct(*args)
    def interrupt(*args): return _extract.pVisusColoredIsoSurface_interrupt(*args)
    def id(*args): return _extract.pVisusColoredIsoSurface_id(*args)
    __swig_getmethods__["sUpdateInterval"] = _extract.pVisusColoredIsoSurface_sUpdateInterval_get
    if _newclass:sUpdateInterval = _swig_property(_extract.pVisusColoredIsoSurface_sUpdateInterval_get)
    def status(*args): return _extract.pVisusColoredIsoSurface_status(*args)
    def idle(*args): return _extract.pVisusColoredIsoSurface_idle(*args)
pVisusColoredIsoSurface_swigregister = _extract.pVisusColoredIsoSurface_swigregister
pVisusColoredIsoSurface_swigregister(pVisusColoredIsoSurface)

class VisusProjector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusProjector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusProjector, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def checkParameters(*args): return _extract.VisusProjector_checkParameters(*args)
    def checkData(*args): return _extract.VisusProjector_checkData(*args)
    def process(*args): return _extract.VisusProjector_process(*args)
    def projection(*args): return _extract.VisusProjector_projection(*args)
    def connectInput(*args): return _extract.VisusProjector_connectInput(*args)
    __swig_getmethods__["construct"] = lambda x: _extract.VisusProjector_construct
    if _newclass:construct = staticmethod(_extract.VisusProjector_construct)
    def nodeType(*args): return _extract.VisusProjector_nodeType(*args)
VisusProjector_swigregister = _extract.VisusProjector_swigregister
VisusProjector_swigregister(VisusProjector)
VisusProjector_construct = _extract.VisusProjector_construct

class pVisusProjector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusProjector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusProjector, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _extract.delete_pVisusProjector
    __del__ = lambda self : None;
    def __eq__(*args): return _extract.pVisusProjector___eq__(*args)
    def __ne__(*args): return _extract.pVisusProjector___ne__(*args)
    def __ref__(*args): return _extract.pVisusProjector___ref__(*args)
    def __deref__(*args): return _extract.pVisusProjector___deref__(*args)
    def getString(*args): return _extract.pVisusProjector_getString(*args)
    def isEmpty(*args): return _extract.pVisusProjector_isEmpty(*args)
    def assign(*args): return _extract.pVisusProjector_assign(*args)
    def checkParameters(*args): return _extract.pVisusProjector_checkParameters(*args)
    def checkData(*args): return _extract.pVisusProjector_checkData(*args)
    def process(*args): return _extract.pVisusProjector_process(*args)
    def projection(*args): return _extract.pVisusProjector_projection(*args)
    def connectInput(*args): return _extract.pVisusProjector_connectInput(*args)
    def construct(*args): return _extract.pVisusProjector_construct(*args)
    def nodeType(*args): return _extract.pVisusProjector_nodeType(*args)
    def processingMode(*args): return _extract.pVisusProjector_processingMode(*args)
    def processThreadless(*args): return _extract.pVisusProjector_processThreadless(*args)
    def latestRequest(*args): return _extract.pVisusProjector_latestRequest(*args)
    __swig_setmethods__["XML_TAG"] = _extract.pVisusProjector_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _extract.pVisusProjector_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_extract.pVisusProjector_XML_TAG_get, _extract.pVisusProjector_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _extract.pVisusProjector_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_extract.pVisusProjector_sNumTypes_get)
    def numTypes(*args): return _extract.pVisusProjector_numTypes(*args)
    def locked(*args): return _extract.pVisusProjector_locked(*args)
    def lockToRead(*args): return _extract.pVisusProjector_lockToRead(*args)
    def unlockAfterRead(*args): return _extract.pVisusProjector_unlockAfterRead(*args)
    def lockToWrite(*args): return _extract.pVisusProjector_lockToWrite(*args)
    def unlockAfterWrite(*args): return _extract.pVisusProjector_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _extract.pVisusProjector_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _extract.pVisusProjector_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_extract.pVisusProjector_sRenderMode_get, _extract.pVisusProjector_sRenderMode_set)
    def __and__(*args): return _extract.pVisusProjector___and__(*args)
    def infoString(*args): return _extract.pVisusProjector_infoString(*args)
    def self(*args): return _extract.pVisusProjector_self(*args)
    def parent(*args): return _extract.pVisusProjector_parent(*args)
    def nrOfChildren(*args): return _extract.pVisusProjector_nrOfChildren(*args)
    def child(*args): return _extract.pVisusProjector_child(*args)
    def getChildIndex(*args): return _extract.pVisusProjector_getChildIndex(*args)
    def attachSubTree(*args): return _extract.pVisusProjector_attachSubTree(*args)
    def detachSubTree(*args): return _extract.pVisusProjector_detachSubTree(*args)
    def destroySubTree(*args): return _extract.pVisusProjector_destroySubTree(*args)
    def nextNode(*args): return _extract.pVisusProjector_nextNode(*args)
    def screenShot(*args): return _extract.pVisusProjector_screenShot(*args)
    def type(*args): return _extract.pVisusProjector_type(*args)
    def category(*args): return _extract.pVisusProjector_category(*args)
    def drawBoundingBox(*args): return _extract.pVisusProjector_drawBoundingBox(*args)
    def visible(*args): return _extract.pVisusProjector_visible(*args)
    def hasSharedValue(*args): return _extract.pVisusProjector_hasSharedValue(*args)
    def inherit(*args): return _extract.pVisusProjector_inherit(*args)
    def boundingBoxColor(*args): return _extract.pVisusProjector_boundingBoxColor(*args)
    def markAsDirty(*args): return _extract.pVisusProjector_markAsDirty(*args)
    def readClearDirty(*args): return _extract.pVisusProjector_readClearDirty(*args)
    def isDirty(*args): return _extract.pVisusProjector_isDirty(*args)
    def declareParameter(*args): return _extract.pVisusProjector_declareParameter(*args)
    def propagateUpwards(*args): return _extract.pVisusProjector_propagateUpwards(*args)
    def propagateDownwards(*args): return _extract.pVisusProjector_propagateDownwards(*args)
    def getValue(*args): return _extract.pVisusProjector_getValue(*args)
    def setValue(*args): return _extract.pVisusProjector_setValue(*args)
    def accumulate2D(*args): return _extract.pVisusProjector_accumulate2D(*args)
    def accumulate3D(*args): return _extract.pVisusProjector_accumulate3D(*args)
    def mapToWorldBox(*args): return _extract.pVisusProjector_mapToWorldBox(*args)
    def rotate(*args): return _extract.pVisusProjector_rotate(*args)
    def translate(*args): return _extract.pVisusProjector_translate(*args)
    def scale(*args): return _extract.pVisusProjector_scale(*args)
    def freeze(*args): return _extract.pVisusProjector_freeze(*args)
    def unfreeze(*args): return _extract.pVisusProjector_unfreeze(*args)
    def frozen(*args): return _extract.pVisusProjector_frozen(*args)
    def display(*args): return _extract.pVisusProjector_display(*args)
    def displayBoundingBox(*args): return _extract.pVisusProjector_displayBoundingBox(*args)
    def validateXML(*args): return _extract.pVisusProjector_validateXML(*args)
    def synchronize(*args): return _extract.pVisusProjector_synchronize(*args)
    def connect(*args): return _extract.pVisusProjector_connect(*args)
    def loadData(*args): return _extract.pVisusProjector_loadData(*args)
    def isConnected(*args): return _extract.pVisusProjector_isConnected(*args)
    def product(*args): return _extract.pVisusProjector_product(*args)
    def produce(*args): return _extract.pVisusProjector_produce(*args)
    def readLockProduct(*args): return _extract.pVisusProjector_readLockProduct(*args)
    def unlockProduct(*args): return _extract.pVisusProjector_unlockProduct(*args)
    def interrupt(*args): return _extract.pVisusProjector_interrupt(*args)
    def id(*args): return _extract.pVisusProjector_id(*args)
    __swig_getmethods__["sUpdateInterval"] = _extract.pVisusProjector_sUpdateInterval_get
    if _newclass:sUpdateInterval = _swig_property(_extract.pVisusProjector_sUpdateInterval_get)
    def status(*args): return _extract.pVisusProjector_status(*args)
    def idle(*args): return _extract.pVisusProjector_idle(*args)
pVisusProjector_swigregister = _extract.pVisusProjector_swigregister
pVisusProjector_swigregister(pVisusProjector)



