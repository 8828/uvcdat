# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _data
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import _data as cppModule

import core
PV_RAW = _data.PV_RAW
PV_CHAR = _data.PV_CHAR
PV_UCHAR = _data.PV_UCHAR
PV_INT = _data.PV_INT
PV_INT16 = _data.PV_INT16
PV_UINT16 = _data.PV_UINT16
PV_INT32 = _data.PV_INT32
PV_UINT32 = _data.PV_UINT32
PV_INT64 = _data.PV_INT64
PV_UINT64 = _data.PV_UINT64
PV_FLOAT = _data.PV_FLOAT
PV_FLOAT32 = _data.PV_FLOAT32
PV_FLOAT64 = _data.PV_FLOAT64
PV_RGB = _data.PV_RGB
PV_RGBA = _data.PV_RGBA
pv_size_of = _data.pv_size_of
VISUS_INDEX_SPACE = _data.VISUS_INDEX_SPACE
VISUS_METERS = _data.VISUS_METERS
VISUS_POLAR_DEGREES = _data.VISUS_POLAR_DEGREES
VISUS_POLAR_RADIANTS = _data.VISUS_POLAR_RADIANTS
VISUS_UNDEFINED_UNIT = _data.VISUS_UNDEFINED_UNIT
convert_to_unit = _data.convert_to_unit
VISUS_GRID_DATA = _data.VISUS_GRID_DATA
VISUS_INDEXED_SET = _data.VISUS_INDEXED_SET
VISUS_UNDEFINED_DATA_CATEGORY = _data.VISUS_UNDEFINED_DATA_CATEGORY
VISUS_BLOCK_DATA = _data.VISUS_BLOCK_DATA
VISUS_TEXTURE_DATA = _data.VISUS_TEXTURE_DATA
VISUS_INDEXED_DATA = _data.VISUS_INDEXED_DATA
VISUS_MESH_DATA = _data.VISUS_MESH_DATA
VISUS_UNDEFINED_DATA = _data.VISUS_UNDEFINED_DATA
class VisusData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusData, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _data.VisusData_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _data.VisusData_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_data.VisusData_XML_TAG_get, _data.VisusData_XML_TAG_set)
    __swig_destroy__ = _data.delete_VisusData
    __del__ = lambda self : None;
    def dataFormat(*args): return _data.VisusData_dataFormat(*args)
    def dataCategory(*args): return _data.VisusData_dataCategory(*args)
    def incId(*args): return _data.VisusData_incId(*args)
    def id(*args): return _data.VisusData_id(*args)
    def resetId(*args): return _data.VisusData_resetId(*args)
    def swapContent(*args): return _data.VisusData_swapContent(*args)
    def copyContent(*args): return _data.VisusData_copyContent(*args)
    def readCompatible(*args): return _data.VisusData_readCompatible(*args)
VisusData_swigregister = _data.VisusData_swigregister
VisusData_swigregister(VisusData)
cvar = _data.cvar
VisusDataCategoryBits = cvar.VisusDataCategoryBits
NULLID = cvar.NULLID

class VisusMetricData(VisusData):
    __swig_setmethods__ = {}
    for _s in [VisusData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusMetricData, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusMetricData, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _data.delete_VisusMetricData
    __del__ = lambda self : None;
    def getDomainBoundingBox(*args): return _data.VisusMetricData_getDomainBoundingBox(*args)
    def matrix(*args): return _data.VisusMetricData_matrix(*args)
    def unit(*args): return _data.VisusMetricData_unit(*args)
    def setDomainBoundingBox(*args): return _data.VisusMetricData_setDomainBoundingBox(*args)
    def swapContent(*args): return _data.VisusMetricData_swapContent(*args)
    def copyContent(*args): return _data.VisusMetricData_copyContent(*args)
VisusMetricData_swigregister = _data.VisusMetricData_swigregister
VisusMetricData_swigregister(VisusMetricData)

class VisusIndexedData(VisusMetricData):
    __swig_setmethods__ = {}
    for _s in [VisusMetricData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusIndexedData, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusMetricData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusIndexedData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _data.new_VisusIndexedData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusIndexedData
    __del__ = lambda self : None;
    def vertexDim(*args): return _data.VisusIndexedData_vertexDim(*args)
    def spatialDim(*args): return _data.VisusIndexedData_spatialDim(*args)
    def nrOfVertices(*args): return _data.VisusIndexedData_nrOfVertices(*args)
    def nrOfElements(*args): return _data.VisusIndexedData_nrOfElements(*args)
    def vertex(*args): return _data.VisusIndexedData_vertex(*args)
    def vertexAddress(*args): return _data.VisusIndexedData_vertexAddress(*args)
    def componentAddress(*args): return _data.VisusIndexedData_componentAddress(*args)
    def element(*args): return _data.VisusIndexedData_element(*args)
    def boundingBox(*args): return _data.VisusIndexedData_boundingBox(*args)
    def computeVertexNormals(*args): return _data.VisusIndexedData_computeVertexNormals(*args)
    def reserveVertices(*args): return _data.VisusIndexedData_reserveVertices(*args)
    def reserveElements(*args): return _data.VisusIndexedData_reserveElements(*args)
    def addVertex(*args): return _data.VisusIndexedData_addVertex(*args)
    def addElement(*args): return _data.VisusIndexedData_addElement(*args)
    def swapContent(*args): return _data.VisusIndexedData_swapContent(*args)
    def copyContent(*args): return _data.VisusIndexedData_copyContent(*args)
    def readCompatible(*args): return _data.VisusIndexedData_readCompatible(*args)
    def constructElement(*args): return _data.VisusIndexedData_constructElement(*args)
    def constructElements(*args): return _data.VisusIndexedData_constructElements(*args)
VisusIndexedData_swigregister = _data.VisusIndexedData_swigregister
VisusIndexedData_swigregister(VisusIndexedData)

class VisusBlockData(VisusMetricData):
    __swig_setmethods__ = {}
    for _s in [VisusMetricData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusBlockData, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusMetricData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusBlockData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _data.new_VisusBlockData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusBlockData
    __del__ = lambda self : None;
    def getDomainBoundingBox(*args): return _data.VisusBlockData_getDomainBoundingBox(*args)
    def getFieldRange(*args): return _data.VisusBlockData_getFieldRange(*args)
    def getMask(*args): return _data.VisusBlockData_getMask(*args)
    def mask2(*args): return _data.VisusBlockData_mask2(*args)
    def translateToCenter(*args): return _data.VisusBlockData_translateToCenter(*args)
    def cellCentered(*args): return _data.VisusBlockData_cellCentered(*args)
    def dataSize(*args): return _data.VisusBlockData_dataSize(*args)
    def data(*args): return _data.VisusBlockData_data(*args)
    def maskSize(*args): return _data.VisusBlockData_maskSize(*args)
    def setMask(*args): return _data.VisusBlockData_setMask(*args)
    def mask(*args): return _data.VisusBlockData_mask(*args)
    def dataType(*args): return _data.VisusBlockData_dataType(*args)
    def samples(*args): return _data.VisusBlockData_samples(*args)
    def sampleSize(*args): return _data.VisusBlockData_sampleSize(*args)
    def setDomainBoundingBox(*args): return _data.VisusBlockData_setDomainBoundingBox(*args)
    def extent(*args): return _data.VisusBlockData_extent(*args)
    def setFieldRange(*args): return _data.VisusBlockData_setFieldRange(*args)
    def compactDimensions(*args): return _data.VisusBlockData_compactDimensions(*args)
    def swapContent(*args): return _data.VisusBlockData_swapContent(*args)
    def copyContent(*args): return _data.VisusBlockData_copyContent(*args)
    def readCompatible(*args): return _data.VisusBlockData_readCompatible(*args)
    def reserveSpace(*args): return _data.VisusBlockData_reserveSpace(*args)
    def __getitem__(*args): return _data.VisusBlockData___getitem__(*args)
    def __setitem__(*args): return _data.VisusBlockData___setitem__(*args)
VisusBlockData_swigregister = _data.VisusBlockData_swigregister
VisusBlockData_swigregister(VisusBlockData)
VisusBlockData.sBitMask = _data.cvar.VisusBlockData_sBitMask

class VisusMeshData(VisusIndexedData):
    __swig_setmethods__ = {}
    for _s in [VisusIndexedData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusMeshData, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusIndexedData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusMeshData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _data.new_VisusMeshData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusMeshData
    __del__ = lambda self : None;
    def elementDim(*args): return _data.VisusMeshData_elementDim(*args)
    def elementNormalAddress(*args): return _data.VisusMeshData_elementNormalAddress(*args)
    def reserveElements(*args): return _data.VisusMeshData_reserveElements(*args)
    def swapContent(*args): return _data.VisusMeshData_swapContent(*args)
    def copyContent(*args): return _data.VisusMeshData_copyContent(*args)
    def readCompatible(*args): return _data.VisusMeshData_readCompatible(*args)
    def loadObj(*args): return _data.VisusMeshData_loadObj(*args)
VisusMeshData_swigregister = _data.VisusMeshData_swigregister
VisusMeshData_swigregister(VisusMeshData)

class VisusTexture(VisusBlockData):
    __swig_setmethods__ = {}
    for _s in [VisusBlockData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusBlockData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusTexture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _data.new_VisusTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusTexture
    __del__ = lambda self : None;
    def textureTarget(*args): return _data.VisusTexture_textureTarget(*args)
    def texMax(*args): return _data.VisusTexture_texMax(*args)
    def preDraw(*args): return _data.VisusTexture_preDraw(*args)
    def postDraw(*args): return _data.VisusTexture_postDraw(*args)
    def convertToRGBA(*args): return _data.VisusTexture_convertToRGBA(*args)
    def convertToInternal(*args): return _data.VisusTexture_convertToInternal(*args)
    def swapContent(*args): return _data.VisusTexture_swapContent(*args)
    def copyContent(*args): return _data.VisusTexture_copyContent(*args)
    def readCompatible(*args): return _data.VisusTexture_readCompatible(*args)
    def loadPPM(*args): return _data.VisusTexture_loadPPM(*args)
    def extractPeriodicBoundary(*args): return _data.VisusTexture_extractPeriodicBoundary(*args)
    def reserveSpace(*args): return _data.VisusTexture_reserveSpace(*args)
VisusTexture_swigregister = _data.VisusTexture_swigregister
VisusTexture_swigregister(VisusTexture)
VisusTexture.sUseHardwareShaders = _data.cvar.VisusTexture_sUseHardwareShaders

VISUS_1D_REQUEST = _data.VISUS_1D_REQUEST
VISUS_2D_REQUEST = _data.VISUS_2D_REQUEST
VISUS_3D_REQUEST = _data.VISUS_3D_REQUEST
class VisusDataRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusDataRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusDataRequest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _data.VisusDataRequest_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _data.VisusDataRequest_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_data.VisusDataRequest_XML_TAG_get, _data.VisusDataRequest_XML_TAG_set)
    def __init__(self, *args): 
        this = _data.new_VisusDataRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusDataRequest
    __del__ = lambda self : None;
    def __eq__(*args): return _data.VisusDataRequest___eq__(*args)
    def __ne__(*args): return _data.VisusDataRequest___ne__(*args)
    def queryRegion(*args): return _data.VisusDataRequest_queryRegion(*args)
    def strides(*args): return _data.VisusDataRequest_strides(*args)
    def numberOfResolutions(*args): return _data.VisusDataRequest_numberOfResolutions(*args)
    def transformation(*args): return _data.VisusDataRequest_transformation(*args)
    def domainBBox(*args): return _data.VisusDataRequest_domainBBox(*args)
    def extent(*args): return _data.VisusDataRequest_extent(*args)
    def startStrides(*args): return _data.VisusDataRequest_startStrides(*args)
    def endStrides(*args): return _data.VisusDataRequest_endStrides(*args)
    def setStrides(*args): return _data.VisusDataRequest_setStrides(*args)
    def requestType(*args): return _data.VisusDataRequest_requestType(*args)
    def valid(*args): return _data.VisusDataRequest_valid(*args)
    def drawBoundingBox(*args): return _data.VisusDataRequest_drawBoundingBox(*args)
    def translateToCenter(*args): return _data.VisusDataRequest_translateToCenter(*args)
    def translate(*args): return _data.VisusDataRequest_translate(*args)
    def shift(*args): return _data.VisusDataRequest_shift(*args)
VisusDataRequest_swigregister = _data.VisusDataRequest_swigregister
VisusDataRequest_swigregister(VisusDataRequest)

class VisusDataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusDataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusDataSource, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _data.delete_VisusDataSource
    __del__ = lambda self : None;
    def isValid(*args): return _data.VisusDataSource_isValid(*args)
    def interrupt(*args): return _data.VisusDataSource_interrupt(*args)
    def samples(*args): return _data.VisusDataSource_samples(*args)
    def dimensions(*args): return _data.VisusDataSource_dimensions(*args)
    def numberOfFields(*args): return _data.VisusDataSource_numberOfFields(*args)
    def fieldType(*args): return _data.VisusDataSource_fieldType(*args)
    def fieldSampleSize(*args): return _data.VisusDataSource_fieldSampleSize(*args)
    def fieldRange(*args): return _data.VisusDataSource_fieldRange(*args)
    def fieldName(*args): return _data.VisusDataSource_fieldName(*args)
    def unit(*args): return _data.VisusDataSource_unit(*args)
    def timeInfo(*args): return _data.VisusDataSource_timeInfo(*args)
    def accessAlignedData(*args): return _data.VisusDataSource_accessAlignedData(*args)
    def accessSample(*args): return _data.VisusDataSource_accessSample(*args)
    def boundingBox(*args): return _data.VisusDataSource_boundingBox(*args)
    def domainBoundingBox(*args): return _data.VisusDataSource_domainBoundingBox(*args)
VisusDataSource_swigregister = _data.VisusDataSource_swigregister
VisusDataSource_swigregister(VisusDataSource)

class VisusDataSourceFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusDataSourceFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusDataSourceFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["make"] = lambda x: _data.VisusDataSourceFactory_make
    if _newclass:make = staticmethod(_data.VisusDataSourceFactory_make)
    def __init__(self, *args): 
        this = _data.new_VisusDataSourceFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusDataSourceFactory
    __del__ = lambda self : None;
VisusDataSourceFactory_swigregister = _data.VisusDataSourceFactory_swigregister
VisusDataSourceFactory_swigregister(VisusDataSourceFactory)
VisusDataSourceFactory_make = _data.VisusDataSourceFactory_make

class VisusFastLoopDataSource(VisusDataSource):
    __swig_setmethods__ = {}
    for _s in [VisusDataSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusFastLoopDataSource, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusFastLoopDataSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _data.new_VisusFastLoopDataSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusFastLoopDataSource
    __del__ = lambda self : None;
    def isValid(*args): return _data.VisusFastLoopDataSource_isValid(*args)
    def interrupt(*args): return _data.VisusFastLoopDataSource_interrupt(*args)
    def samples(*args): return _data.VisusFastLoopDataSource_samples(*args)
    def dimensions(*args): return _data.VisusFastLoopDataSource_dimensions(*args)
    def boundingBox(*args): return _data.VisusFastLoopDataSource_boundingBox(*args)
    def numberOfFields(*args): return _data.VisusFastLoopDataSource_numberOfFields(*args)
    def fieldType(*args): return _data.VisusFastLoopDataSource_fieldType(*args)
    def fieldSampleSize(*args): return _data.VisusFastLoopDataSource_fieldSampleSize(*args)
    def fieldRange(*args): return _data.VisusFastLoopDataSource_fieldRange(*args)
    def fieldName(*args): return _data.VisusFastLoopDataSource_fieldName(*args)
    def accessAlignedData(*args): return _data.VisusFastLoopDataSource_accessAlignedData(*args)
    def accessSample(*args): return _data.VisusFastLoopDataSource_accessSample(*args)
VisusFastLoopDataSource_swigregister = _data.VisusFastLoopDataSource_swigregister
VisusFastLoopDataSource_swigregister(VisusFastLoopDataSource)

class VisusIncoreDataSource(VisusDataSource):
    __swig_setmethods__ = {}
    for _s in [VisusDataSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusIncoreDataSource, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusIncoreDataSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _data.new_VisusIncoreDataSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _data.delete_VisusIncoreDataSource
    __del__ = lambda self : None;
    def isValid(*args): return _data.VisusIncoreDataSource_isValid(*args)
    def interrupt(*args): return _data.VisusIncoreDataSource_interrupt(*args)
    def samples(*args): return _data.VisusIncoreDataSource_samples(*args)
    def dimensions(*args): return _data.VisusIncoreDataSource_dimensions(*args)
    def boundingBox(*args): return _data.VisusIncoreDataSource_boundingBox(*args)
    def numberOfFields(*args): return _data.VisusIncoreDataSource_numberOfFields(*args)
    def fieldType(*args): return _data.VisusIncoreDataSource_fieldType(*args)
    def fieldSampleSize(*args): return _data.VisusIncoreDataSource_fieldSampleSize(*args)
    def fieldRange(*args): return _data.VisusIncoreDataSource_fieldRange(*args)
    def fieldName(*args): return _data.VisusIncoreDataSource_fieldName(*args)
    def unit(*args): return _data.VisusIncoreDataSource_unit(*args)
    def unitBoundingBox(*args): return _data.VisusIncoreDataSource_unitBoundingBox(*args)
    def accessAlignedData(*args): return _data.VisusIncoreDataSource_accessAlignedData(*args)
    def accessSample(*args): return _data.VisusIncoreDataSource_accessSample(*args)
VisusIncoreDataSource_swigregister = _data.VisusIncoreDataSource_swigregister
VisusIncoreDataSource_swigregister(VisusIncoreDataSource)



