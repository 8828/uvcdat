# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _core
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import _core as cppModule

class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_IntArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _core.IntArray___getitem__(*args)
    def __setitem__(*args): return _core.IntArray___setitem__(*args)
    def cast(*args): return _core.IntArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _core.IntArray_frompointer
    if _newclass:frompointer = staticmethod(_core.IntArray_frompointer)
IntArray_swigregister = _core.IntArray_swigregister
IntArray_swigregister(IntArray)
IntArray_frompointer = _core.IntArray_frompointer

class FloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_FloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_FloatArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _core.FloatArray___getitem__(*args)
    def __setitem__(*args): return _core.FloatArray___setitem__(*args)
    def cast(*args): return _core.FloatArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _core.FloatArray_frompointer
    if _newclass:frompointer = staticmethod(_core.FloatArray_frompointer)
FloatArray_swigregister = _core.FloatArray_swigregister
FloatArray_swigregister(FloatArray)
FloatArray_frompointer = _core.FloatArray_frompointer

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_DoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_DoubleArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _core.DoubleArray___getitem__(*args)
    def __setitem__(*args): return _core.DoubleArray___setitem__(*args)
    def cast(*args): return _core.DoubleArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _core.DoubleArray_frompointer
    if _newclass:frompointer = staticmethod(_core.DoubleArray_frompointer)
DoubleArray_swigregister = _core.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)
DoubleArray_frompointer = _core.DoubleArray_frompointer

LEFT_BACK_LOWER_CORNER = _core.LEFT_BACK_LOWER_CORNER
LEFT_BACK_UPPER_CORNER = _core.LEFT_BACK_UPPER_CORNER
RIGHT_BACK_LOWER_CORNER = _core.RIGHT_BACK_LOWER_CORNER
RIGHT_BACK_UPPER_CORNER = _core.RIGHT_BACK_UPPER_CORNER
LEFT_FRONT_LOWER_CORNER = _core.LEFT_FRONT_LOWER_CORNER
LEFT_FRONT_UPPER_CORNER = _core.LEFT_FRONT_UPPER_CORNER
RIGHT_FRONT_LOWER_CORNER = _core.RIGHT_FRONT_LOWER_CORNER
RIGHT_FRONT_UPPER_CORNER = _core.RIGHT_FRONT_UPPER_CORNER
NUM_CORNERS = _core.NUM_CORNERS
class VisusBoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusBoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusBoundingBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusBoundingBox_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusBoundingBox_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusBoundingBox_XML_TAG_get, _core.VisusBoundingBox_XML_TAG_set)
    __swig_getmethods__["LINE_SEGMENTS"] = _core.VisusBoundingBox_LINE_SEGMENTS_get
    if _newclass:LINE_SEGMENTS = _swig_property(_core.VisusBoundingBox_LINE_SEGMENTS_get)
    def __init__(self, *args): 
        this = _core.new_VisusBoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusBoundingBox
    __del__ = lambda self : None;
    def __iadd__(*args): return _core.VisusBoundingBox___iadd__(*args)
    def __eq__(*args): return _core.VisusBoundingBox___eq__(*args)
    def __ne__(*args): return _core.VisusBoundingBox___ne__(*args)
    def scale(*args): return _core.VisusBoundingBox_scale(*args)
    def get(*args): return _core.VisusBoundingBox_get(*args)
    def leftLower(*args): return _core.VisusBoundingBox_leftLower(*args)
    def rightUpper(*args): return _core.VisusBoundingBox_rightUpper(*args)
    def center(*args): return _core.VisusBoundingBox_center(*args)
    def set(*args): return _core.VisusBoundingBox_set(*args)
    def valid(*args): return _core.VisusBoundingBox_valid(*args)
    def translate(*args): return _core.VisusBoundingBox_translate(*args)
    def rotateRowMajor(*args): return _core.VisusBoundingBox_rotateRowMajor(*args)
    def rotateColumnMajor(*args): return _core.VisusBoundingBox_rotateColumnMajor(*args)
    def translateToCenter(*args): return _core.VisusBoundingBox_translateToCenter(*args)
    def display(*args): return _core.VisusBoundingBox_display(*args)
    def display2D(*args): return _core.VisusBoundingBox_display2D(*args)
    def getClosestToViewer(*args): return _core.VisusBoundingBox_getClosestToViewer(*args)
    __swig_getmethods__["sortPointsByDim"] = lambda x: _core.VisusBoundingBox_sortPointsByDim
    if _newclass:sortPointsByDim = staticmethod(_core.VisusBoundingBox_sortPointsByDim)
    def assign(*args): return _core.VisusBoundingBox_assign(*args)
    def __getitem__(*args): return _core.VisusBoundingBox___getitem__(*args)
    def __setitem__(*args): return _core.VisusBoundingBox___setitem__(*args)
VisusBoundingBox_swigregister = _core.VisusBoundingBox_swigregister
VisusBoundingBox_swigregister(VisusBoundingBox)
cvar = _core.cvar
VisusBoundingBox_sortPointsByDim = _core.VisusBoundingBox_sortPointsByDim

VISUS_ORTHOGRAPHIC = _core.VISUS_ORTHOGRAPHIC
VISUS_PERSPECTIVE = _core.VISUS_PERSPECTIVE
class VisusCamera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusCamera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusCamera_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusCamera_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusCamera_XML_TAG_get, _core.VisusCamera_XML_TAG_set)
    def __init__(self, *args): 
        this = _core.new_VisusCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusCamera
    __del__ = lambda self : None;
    def modelView(*args): return _core.VisusCamera_modelView(*args)
    def active(*args): return _core.VisusCamera_active(*args)
    def cameraType(*args): return _core.VisusCamera_cameraType(*args)
    def viewAngle(*args): return _core.VisusCamera_viewAngle(*args)
    def nearPlane(*args): return _core.VisusCamera_nearPlane(*args)
    def farPlane(*args): return _core.VisusCamera_farPlane(*args)
    def position(*args): return _core.VisusCamera_position(*args)
    def orientation(*args): return _core.VisusCamera_orientation(*args)
    def setCamera(*args): return _core.VisusCamera_setCamera(*args)
    def rotate(*args): return _core.VisusCamera_rotate(*args)
    def translate(*args): return _core.VisusCamera_translate(*args)
    def scale(*args): return _core.VisusCamera_scale(*args)
    def turn(*args): return _core.VisusCamera_turn(*args)
    def pan(*args): return _core.VisusCamera_pan(*args)
    def zoom(*args): return _core.VisusCamera_zoom(*args)
    def setupOpenGL(*args): return _core.VisusCamera_setupOpenGL(*args)
    def assign(*args): return _core.VisusCamera_assign(*args)
    def save(*args): return _core.VisusCamera_save(*args)
    def load(*args): return _core.VisusCamera_load(*args)
    __swig_getmethods__["interpolate"] = lambda x: _core.VisusCamera_interpolate
    if _newclass:interpolate = staticmethod(_core.VisusCamera_interpolate)
VisusCamera_swigregister = _core.VisusCamera_swigregister
VisusCamera_swigregister(VisusCamera)
interpolate = _core.interpolate
VisusCamera.sCameraTypeDefault = _core.cvar.VisusCamera_sCameraTypeDefault
VisusCamera.sPositionDefault = _core.cvar.VisusCamera_sPositionDefault
VisusCamera.sViewDefault = _core.cvar.VisusCamera_sViewDefault
VisusCamera.sUpDefault = _core.cvar.VisusCamera_sUpDefault
VisusCamera.sRightDefault = _core.cvar.VisusCamera_sRightDefault
VisusCamera.sViewAngleDefault = _core.cvar.VisusCamera_sViewAngleDefault
VisusCamera.sNearPlaneDefault = _core.cvar.VisusCamera_sNearPlaneDefault
VisusCamera.sFarPlaneDefault = _core.cvar.VisusCamera_sFarPlaneDefault
VisusCamera.sRotationSpeedDefault = _core.cvar.VisusCamera_sRotationSpeedDefault
VisusCamera.sPanSpeedDefault = _core.cvar.VisusCamera_sPanSpeedDefault
VisusCamera.sZoomFactorDefault = _core.cvar.VisusCamera_sZoomFactorDefault
VisusCamera.sFudgeFactor = _core.cvar.VisusCamera_sFudgeFactor
VisusCamera_interpolate = _core.VisusCamera_interpolate

class VisusColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusColor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusColor_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusColor_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusColor_XML_TAG_get, _core.VisusColor_XML_TAG_set)
    def __init__(self, *args): 
        this = _core.new_VisusColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def glColor(*args): return _core.VisusColor_glColor(*args)
    def assign(*args): return _core.VisusColor_assign(*args)
    __swig_destroy__ = _core.delete_VisusColor
    __del__ = lambda self : None;
VisusColor_swigregister = _core.VisusColor_swigregister
VisusColor_swigregister(VisusColor)

VISUS_GREY_SCALE = _core.VISUS_GREY_SCALE
VISUS_GREY_RAMP = _core.VISUS_GREY_RAMP
VISUS_BANDED = _core.VISUS_BANDED
VISUS_BGRY = _core.VISUS_BGRY
VISUS_BRY = _core.VISUS_BRY
VISUS_GAMMA = _core.VISUS_GAMMA
VISUS_HOT1 = _core.VISUS_HOT1
VISUS_HOT2 = _core.VISUS_HOT2
VISUS_ICE = _core.VISUS_ICE
VISUS_LIGHTHUES = _core.VISUS_LIGHTHUES
VISUS_LUT16 = _core.VISUS_LUT16
VISUS_RICH = _core.VISUS_RICH
VISUS_SMOOTH_RICH = _core.VISUS_SMOOTH_RICH
VISUS_CUSTOM_MAP = _core.VISUS_CUSTOM_MAP
VISUS_LINEAR_MAP = _core.VISUS_LINEAR_MAP
VISUS_LOG_MAP = _core.VISUS_LOG_MAP
VISUS_EXP_MAP = _core.VISUS_EXP_MAP
class VisusColorMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusColorMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusColorMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusColorMap_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusColorMap_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusColorMap_XML_TAG_get, _core.VisusColorMap_XML_TAG_set)
    def __init__(self, *args): 
        this = _core.new_VisusColorMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusColorMap
    __del__ = lambda self : None;
    def resolution(*args): return _core.VisusColorMap_resolution(*args)
    def getColor(*args): return _core.VisusColorMap_getColor(*args)
    def getFloorColor(*args): return _core.VisusColorMap_getFloorColor(*args)
    def getCeilingColor(*args): return _core.VisusColorMap_getCeilingColor(*args)
    def texId(*args): return _core.VisusColorMap_texId(*args)
    def initialized(*args): return _core.VisusColorMap_initialized(*args)
    def type(*args): return _core.VisusColorMap_type(*args)
    def getBounds(*args): return _core.VisusColorMap_getBounds(*args)
    def style(*args): return _core.VisusColorMap_style(*args)
    def setFloorColor(*args): return _core.VisusColorMap_setFloorColor(*args)
    def setCeilingColor(*args): return _core.VisusColorMap_setCeilingColor(*args)
    def linearMap(*args): return _core.VisusColorMap_linearMap(*args)
    def logarithmicMap(*args): return _core.VisusColorMap_logarithmicMap(*args)
    def exponentialMap(*args): return _core.VisusColorMap_exponentialMap(*args)
    def setBounds(*args): return _core.VisusColorMap_setBounds(*args)
    def assign(*args): return _core.VisusColorMap_assign(*args)
    def __getitem__(*args): return _core.VisusColorMap___getitem__(*args)
    def __setitem__(*args): return _core.VisusColorMap___setitem__(*args)
VisusColorMap_swigregister = _core.VisusColorMap_swigregister
VisusColorMap_swigregister(VisusColorMap)

class VisusConsumer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusConsumer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusConsumer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def synchronize(*args): return _core.VisusConsumer_synchronize(*args)
    def connect(*args): return _core.VisusConsumer_connect(*args)
    def loadData(*args): return _core.VisusConsumer_loadData(*args)
    def isConnected(*args): return _core.VisusConsumer_isConnected(*args)
VisusConsumer_swigregister = _core.VisusConsumer_swigregister
VisusConsumer_swigregister(VisusConsumer)

class pVisusConsumer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusConsumer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusConsumer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_pVisusConsumer
    __del__ = lambda self : None;
    def __eq__(*args): return _core.pVisusConsumer___eq__(*args)
    def __ne__(*args): return _core.pVisusConsumer___ne__(*args)
    def __ref__(*args): return _core.pVisusConsumer___ref__(*args)
    def __deref__(*args): return _core.pVisusConsumer___deref__(*args)
    def getString(*args): return _core.pVisusConsumer_getString(*args)
    def isEmpty(*args): return _core.pVisusConsumer_isEmpty(*args)
    def assign(*args): return _core.pVisusConsumer_assign(*args)
    def synchronize(*args): return _core.pVisusConsumer_synchronize(*args)
    def connect(*args): return _core.pVisusConsumer_connect(*args)
    def loadData(*args): return _core.pVisusConsumer_loadData(*args)
    def isConnected(*args): return _core.pVisusConsumer_isConnected(*args)
pVisusConsumer_swigregister = _core.pVisusConsumer_swigregister
pVisusConsumer_swigregister(pVisusConsumer)

class VisusDataDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusDataDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusDataDescription, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusDataDescription_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusDataDescription_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusDataDescription_XML_TAG_get, _core.VisusDataDescription_XML_TAG_set)
    def __init__(self, *args): 
        
        self._data_reference = []
        for ref in args[1:]:
            self._data_reference.append(ref)
        args = args[0:1]

        this = _core.new_VisusDataDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusDataDescription
    __del__ = lambda self : None;
    def saveDataToXML(*args): return _core.VisusDataDescription_saveDataToXML(*args)
VisusDataDescription_swigregister = _core.VisusDataDescription_swigregister
VisusDataDescription_swigregister(VisusDataDescription)

banded = _core.banded
bgry = _core.bgry
bry = _core.bry
gamma = _core.gamma
hot1 = _core.hot1
hot2 = _core.hot2
ice = _core.ice
lighthues = _core.lighthues
lut16 = _core.lut16
rich = _core.rich
smooth_rich = _core.smooth_rich
construct_color_map = _core.construct_color_map
class VisusGenericValueFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusGenericValueFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusGenericValueFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusGenericValueFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusGenericValueFloat
    __del__ = lambda self : None;
    def __imul__(*args): return _core.VisusGenericValueFloat___imul__(*args)
    def __idiv__(*args): return _core.VisusGenericValueFloat___idiv__(*args)
    def get(*args): return _core.VisusGenericValueFloat_get(*args)
    def set(*args): return _core.VisusGenericValueFloat_set(*args)
    def data(*args): return _core.VisusGenericValueFloat_data(*args)
    def assign(*args): return _core.VisusGenericValueFloat_assign(*args)
VisusGenericValueFloat_swigregister = _core.VisusGenericValueFloat_swigregister
VisusGenericValueFloat_swigregister(VisusGenericValueFloat)
grey_scale = _core.grey_scale
grey_ramp = _core.grey_ramp

class VisusEarthRadius(VisusGenericValueFloat):
    __swig_setmethods__ = {}
    for _s in [VisusGenericValueFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusEarthRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusGenericValueFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusEarthRadius, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusEarthRadius(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusEarthRadius
    __del__ = lambda self : None;
VisusEarthRadius_swigregister = _core.VisusEarthRadius_swigregister
VisusEarthRadius_swigregister(VisusEarthRadius)

VISUS_BITMAP = _core.VISUS_BITMAP
VISUS_PIXMAP = _core.VISUS_PIXMAP
VISUS_OUTLINE = _core.VISUS_OUTLINE
VISUS_POLYGON = _core.VISUS_POLYGON
VISUS_EXTRUDE = _core.VISUS_EXTRUDE
VISUS_TEXTURE = _core.VISUS_TEXTURE
VISUS_FONT_RELATIVE = _core.VISUS_FONT_RELATIVE
VISUS_FONT_ABSOLUTE = _core.VISUS_FONT_ABSOLUTE
class VisusFont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusFont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusFont, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusFont_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusFont_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusFont_XML_TAG_get, _core.VisusFont_XML_TAG_set)
    def __init__(self, *args): 
        this = _core.new_VisusFont(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusFont
    __del__ = lambda self : None;
    def fontUpdate(*args): return _core.VisusFont_fontUpdate(*args)
    def fontStyle(*args): return _core.VisusFont_fontStyle(*args)
    def fontScaling(*args): return _core.VisusFont_fontScaling(*args)
    def fontSize(*args): return _core.VisusFont_fontSize(*args)
    def fontDepth(*args): return _core.VisusFont_fontDepth(*args)
    def fontColor(*args): return _core.VisusFont_fontColor(*args)
    def fontFile(*args): return _core.VisusFont_fontFile(*args)
    def validStyle(*args): return _core.VisusFont_validStyle(*args)
    def isValidStyle(*args): return _core.VisusFont_isValidStyle(*args)
    def assign(*args): return _core.VisusFont_assign(*args)
VisusFont_swigregister = _core.VisusFont_swigregister
VisusFont_swigregister(VisusFont)

class VisusIsoValue(VisusGenericValueFloat):
    __swig_setmethods__ = {}
    for _s in [VisusGenericValueFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusIsoValue, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusGenericValueFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusIsoValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusIsoValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusIsoValue
    __del__ = lambda self : None;
VisusIsoValue_swigregister = _core.VisusIsoValue_swigregister
VisusIsoValue_swigregister(VisusIsoValue)

class VisusOpenGLState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusOpenGLState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusOpenGLState, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusOpenGLState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusOpenGLState
    __del__ = lambda self : None;
    def projection(*args): return _core.VisusOpenGLState_projection(*args)
    def viewport(*args): return _core.VisusOpenGLState_viewport(*args)
    def fetchState(*args): return _core.VisusOpenGLState_fetchState(*args)
    def printState(*args): return _core.VisusOpenGLState_printState(*args)
VisusOpenGLState_swigregister = _core.VisusOpenGLState_swigregister
VisusOpenGLState_swigregister(VisusOpenGLState)
VisusOpenGLState.sDefaultWidth = _core.cvar.VisusOpenGLState_sDefaultWidth
VisusOpenGLState.sDefaultHeight = _core.cvar.VisusOpenGLState_sDefaultHeight
VisusOpenGLState.sDefaultCameraPosition = _core.cvar.VisusOpenGLState_sDefaultCameraPosition
VisusOpenGLState.sDefaultView = _core.cvar.VisusOpenGLState_sDefaultView
VisusOpenGLState.sDefaultUp = _core.cvar.VisusOpenGLState_sDefaultUp
VisusOpenGLState.sDefaultViewVolume = _core.cvar.VisusOpenGLState_sDefaultViewVolume
VisusOpenGLState.sDefaultViewport = _core.cvar.VisusOpenGLState_sDefaultViewport
VisusOpenGLState.sDefaultProjection = _core.cvar.VisusOpenGLState_sDefaultProjection

VISUS_3D_RENDER = _core.VISUS_3D_RENDER
VISUS_2D_RENDER = _core.VISUS_2D_RENDER
VISUS_NUM_RENDER_MODE = _core.VISUS_NUM_RENDER_MODE
compare = _core.compare
class VisusGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusGroup, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusGroup_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusGroup_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusGroup_XML_TAG_get, _core.VisusGroup_XML_TAG_set)
    sNumTypes = _core.VisusGroup_sNumTypes
    __swig_getmethods__["numTypes"] = lambda x: _core.VisusGroup_numTypes
    if _newclass:numTypes = staticmethod(_core.VisusGroup_numTypes)
    __swig_getmethods__["locked"] = lambda x: _core.VisusGroup_locked
    if _newclass:locked = staticmethod(_core.VisusGroup_locked)
    __swig_getmethods__["lockToRead"] = lambda x: _core.VisusGroup_lockToRead
    if _newclass:lockToRead = staticmethod(_core.VisusGroup_lockToRead)
    __swig_getmethods__["unlockAfterRead"] = lambda x: _core.VisusGroup_unlockAfterRead
    if _newclass:unlockAfterRead = staticmethod(_core.VisusGroup_unlockAfterRead)
    __swig_getmethods__["lockToWrite"] = lambda x: _core.VisusGroup_lockToWrite
    if _newclass:lockToWrite = staticmethod(_core.VisusGroup_lockToWrite)
    __swig_getmethods__["unlockAfterWrite"] = lambda x: _core.VisusGroup_unlockAfterWrite
    if _newclass:unlockAfterWrite = staticmethod(_core.VisusGroup_unlockAfterWrite)
    __swig_setmethods__["sRenderMode"] = _core.VisusGroup_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _core.VisusGroup_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_core.VisusGroup_sRenderMode_get, _core.VisusGroup_sRenderMode_set)
    def __and__(*args): return _core.VisusGroup___and__(*args)
    def infoString(*args): return _core.VisusGroup_infoString(*args)
    def self(*args): return _core.VisusGroup_self(*args)
    def parent(*args): return _core.VisusGroup_parent(*args)
    def nrOfChildren(*args): return _core.VisusGroup_nrOfChildren(*args)
    def child(*args): return _core.VisusGroup_child(*args)
    def getChildIndex(*args): return _core.VisusGroup_getChildIndex(*args)
    def attachSubTree(*args): return _core.VisusGroup_attachSubTree(*args)
    def detachSubTree(*args): return _core.VisusGroup_detachSubTree(*args)
    def destroySubTree(*args): return _core.VisusGroup_destroySubTree(*args)
    def nextNode(*args): return _core.VisusGroup_nextNode(*args)
    def screenShot(*args): return _core.VisusGroup_screenShot(*args)
    def type(*args): return _core.VisusGroup_type(*args)
    def category(*args): return _core.VisusGroup_category(*args)
    def hasSharedValue(*args): return _core.VisusGroup_hasSharedValue(*args)
    def drawBoundingBox(*args): return _core.VisusGroup_drawBoundingBox(*args)
    def visible(*args): return _core.VisusGroup_visible(*args)
    def inherit(*args): return _core.VisusGroup_inherit(*args)
    def boundingBoxColor(*args): return _core.VisusGroup_boundingBoxColor(*args)
    def markAsDirty(*args): return _core.VisusGroup_markAsDirty(*args)
    def readClearDirty(*args): return _core.VisusGroup_readClearDirty(*args)
    def isDirty(*args): return _core.VisusGroup_isDirty(*args)
    def declareParameter(*args): return _core.VisusGroup_declareParameter(*args)
    def propagateUpwards(*args): return _core.VisusGroup_propagateUpwards(*args)
    def propagateDownwards(*args): return _core.VisusGroup_propagateDownwards(*args)
    def getValue(*args): return _core.VisusGroup_getValue(*args)
    def setValue(*args): return _core.VisusGroup_setValue(*args)
    def accumulate2D(*args): return _core.VisusGroup_accumulate2D(*args)
    def accumulate3D(*args): return _core.VisusGroup_accumulate3D(*args)
    def mapToWorldBox(*args): return _core.VisusGroup_mapToWorldBox(*args)
    def rotate(*args): return _core.VisusGroup_rotate(*args)
    def translate(*args): return _core.VisusGroup_translate(*args)
    def scale(*args): return _core.VisusGroup_scale(*args)
    def freeze(*args): return _core.VisusGroup_freeze(*args)
    def unfreeze(*args): return _core.VisusGroup_unfreeze(*args)
    def frozen(*args): return _core.VisusGroup_frozen(*args)
    def display(*args): return _core.VisusGroup_display(*args)
    def displayBoundingBox(*args): return _core.VisusGroup_displayBoundingBox(*args)
    __swig_getmethods__["validateXML"] = lambda x: _core.VisusGroup_validateXML
    if _newclass:validateXML = staticmethod(_core.VisusGroup_validateXML)
    __swig_getmethods__["construct"] = lambda x: _core.VisusGroup_construct
    if _newclass:construct = staticmethod(_core.VisusGroup_construct)
    def nodeType(*args): return _core.VisusGroup_nodeType(*args)
VisusGroup_swigregister = _core.VisusGroup_swigregister
VisusGroup_swigregister(VisusGroup)
VisusGroup_numTypes = _core.VisusGroup_numTypes
VisusGroup_locked = _core.VisusGroup_locked
VisusGroup_lockToRead = _core.VisusGroup_lockToRead
VisusGroup_unlockAfterRead = _core.VisusGroup_unlockAfterRead
VisusGroup_lockToWrite = _core.VisusGroup_lockToWrite
VisusGroup_unlockAfterWrite = _core.VisusGroup_unlockAfterWrite
VisusGroup_validateXML = _core.VisusGroup_validateXML
VisusGroup_construct = _core.VisusGroup_construct

class pVisusGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pVisusGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pVisusGroup, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_pVisusGroup
    __del__ = lambda self : None;
    def __eq__(*args): return _core.pVisusGroup___eq__(*args)
    def __ne__(*args): return _core.pVisusGroup___ne__(*args)
    def __ref__(*args): return _core.pVisusGroup___ref__(*args)
    def __deref__(*args): return _core.pVisusGroup___deref__(*args)
    def getString(*args): return _core.pVisusGroup_getString(*args)
    def isEmpty(*args): return _core.pVisusGroup_isEmpty(*args)
    def assign(*args): return _core.pVisusGroup_assign(*args)
    __swig_setmethods__["XML_TAG"] = _core.pVisusGroup_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.pVisusGroup_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.pVisusGroup_XML_TAG_get, _core.pVisusGroup_XML_TAG_set)
    __swig_getmethods__["sNumTypes"] = _core.pVisusGroup_sNumTypes_get
    if _newclass:sNumTypes = _swig_property(_core.pVisusGroup_sNumTypes_get)
    def numTypes(*args): return _core.pVisusGroup_numTypes(*args)
    def locked(*args): return _core.pVisusGroup_locked(*args)
    def lockToRead(*args): return _core.pVisusGroup_lockToRead(*args)
    def unlockAfterRead(*args): return _core.pVisusGroup_unlockAfterRead(*args)
    def lockToWrite(*args): return _core.pVisusGroup_lockToWrite(*args)
    def unlockAfterWrite(*args): return _core.pVisusGroup_unlockAfterWrite(*args)
    __swig_setmethods__["sRenderMode"] = _core.pVisusGroup_sRenderMode_set
    __swig_getmethods__["sRenderMode"] = _core.pVisusGroup_sRenderMode_get
    if _newclass:sRenderMode = _swig_property(_core.pVisusGroup_sRenderMode_get, _core.pVisusGroup_sRenderMode_set)
    def __and__(*args): return _core.pVisusGroup___and__(*args)
    def infoString(*args): return _core.pVisusGroup_infoString(*args)
    def self(*args): return _core.pVisusGroup_self(*args)
    def parent(*args): return _core.pVisusGroup_parent(*args)
    def nrOfChildren(*args): return _core.pVisusGroup_nrOfChildren(*args)
    def child(*args): return _core.pVisusGroup_child(*args)
    def getChildIndex(*args): return _core.pVisusGroup_getChildIndex(*args)
    def attachSubTree(*args): return _core.pVisusGroup_attachSubTree(*args)
    def detachSubTree(*args): return _core.pVisusGroup_detachSubTree(*args)
    def destroySubTree(*args): return _core.pVisusGroup_destroySubTree(*args)
    def nextNode(*args): return _core.pVisusGroup_nextNode(*args)
    def screenShot(*args): return _core.pVisusGroup_screenShot(*args)
    def type(*args): return _core.pVisusGroup_type(*args)
    def category(*args): return _core.pVisusGroup_category(*args)
    def drawBoundingBox(*args): return _core.pVisusGroup_drawBoundingBox(*args)
    def visible(*args): return _core.pVisusGroup_visible(*args)
    def hasSharedValue(*args): return _core.pVisusGroup_hasSharedValue(*args)
    def inherit(*args): return _core.pVisusGroup_inherit(*args)
    def boundingBoxColor(*args): return _core.pVisusGroup_boundingBoxColor(*args)
    def markAsDirty(*args): return _core.pVisusGroup_markAsDirty(*args)
    def readClearDirty(*args): return _core.pVisusGroup_readClearDirty(*args)
    def isDirty(*args): return _core.pVisusGroup_isDirty(*args)
    def declareParameter(*args): return _core.pVisusGroup_declareParameter(*args)
    def propagateUpwards(*args): return _core.pVisusGroup_propagateUpwards(*args)
    def propagateDownwards(*args): return _core.pVisusGroup_propagateDownwards(*args)
    def getValue(*args): return _core.pVisusGroup_getValue(*args)
    def setValue(*args): return _core.pVisusGroup_setValue(*args)
    def accumulate2D(*args): return _core.pVisusGroup_accumulate2D(*args)
    def accumulate3D(*args): return _core.pVisusGroup_accumulate3D(*args)
    def mapToWorldBox(*args): return _core.pVisusGroup_mapToWorldBox(*args)
    def rotate(*args): return _core.pVisusGroup_rotate(*args)
    def translate(*args): return _core.pVisusGroup_translate(*args)
    def scale(*args): return _core.pVisusGroup_scale(*args)
    def freeze(*args): return _core.pVisusGroup_freeze(*args)
    def unfreeze(*args): return _core.pVisusGroup_unfreeze(*args)
    def frozen(*args): return _core.pVisusGroup_frozen(*args)
    def display(*args): return _core.pVisusGroup_display(*args)
    def displayBoundingBox(*args): return _core.pVisusGroup_displayBoundingBox(*args)
    def validateXML(*args): return _core.pVisusGroup_validateXML(*args)
    def construct(*args): return _core.pVisusGroup_construct(*args)
    def nodeType(*args): return _core.pVisusGroup_nodeType(*args)
pVisusGroup_swigregister = _core.pVisusGroup_swigregister
pVisusGroup_swigregister(pVisusGroup)

class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _core.PySwigIterator_value(*args)
    def incr(*args): return _core.PySwigIterator_incr(*args)
    def decr(*args): return _core.PySwigIterator_decr(*args)
    def distance(*args): return _core.PySwigIterator_distance(*args)
    def equal(*args): return _core.PySwigIterator_equal(*args)
    def copy(*args): return _core.PySwigIterator_copy(*args)
    def next(*args): return _core.PySwigIterator_next(*args)
    def previous(*args): return _core.PySwigIterator_previous(*args)
    def advance(*args): return _core.PySwigIterator_advance(*args)
    def __eq__(*args): return _core.PySwigIterator___eq__(*args)
    def __ne__(*args): return _core.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _core.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _core.PySwigIterator___isub__(*args)
    def __add__(*args): return _core.PySwigIterator___add__(*args)
    def __sub__(*args): return _core.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _core.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

attachResult = _core.attachResult
convertBlockDataNumpy = _core.convertBlockDataNumpy
class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(*args): return _core.VectorInt_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _core.VectorInt___nonzero__(*args)
    def __len__(*args): return _core.VectorInt___len__(*args)
    def pop(*args): return _core.VectorInt_pop(*args)
    def __getslice__(*args): return _core.VectorInt___getslice__(*args)
    def __setslice__(*args): return _core.VectorInt___setslice__(*args)
    def __delslice__(*args): return _core.VectorInt___delslice__(*args)
    def __delitem__(*args): return _core.VectorInt___delitem__(*args)
    def __getitem__(*args): return _core.VectorInt___getitem__(*args)
    def __setitem__(*args): return _core.VectorInt___setitem__(*args)
    def append(*args): return _core.VectorInt_append(*args)
    def empty(*args): return _core.VectorInt_empty(*args)
    def size(*args): return _core.VectorInt_size(*args)
    def clear(*args): return _core.VectorInt_clear(*args)
    def swap(*args): return _core.VectorInt_swap(*args)
    def get_allocator(*args): return _core.VectorInt_get_allocator(*args)
    def begin(*args): return _core.VectorInt_begin(*args)
    def end(*args): return _core.VectorInt_end(*args)
    def rbegin(*args): return _core.VectorInt_rbegin(*args)
    def rend(*args): return _core.VectorInt_rend(*args)
    def pop_back(*args): return _core.VectorInt_pop_back(*args)
    def erase(*args): return _core.VectorInt_erase(*args)
    def __init__(self, *args): 
        this = _core.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _core.VectorInt_push_back(*args)
    def front(*args): return _core.VectorInt_front(*args)
    def back(*args): return _core.VectorInt_back(*args)
    def assign(*args): return _core.VectorInt_assign(*args)
    def resize(*args): return _core.VectorInt_resize(*args)
    def insert(*args): return _core.VectorInt_insert(*args)
    def reserve(*args): return _core.VectorInt_reserve(*args)
    def capacity(*args): return _core.VectorInt_capacity(*args)
    __swig_destroy__ = _core.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _core.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def iterator(*args): return _core.VectorDouble_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _core.VectorDouble___nonzero__(*args)
    def __len__(*args): return _core.VectorDouble___len__(*args)
    def pop(*args): return _core.VectorDouble_pop(*args)
    def __getslice__(*args): return _core.VectorDouble___getslice__(*args)
    def __setslice__(*args): return _core.VectorDouble___setslice__(*args)
    def __delslice__(*args): return _core.VectorDouble___delslice__(*args)
    def __delitem__(*args): return _core.VectorDouble___delitem__(*args)
    def __getitem__(*args): return _core.VectorDouble___getitem__(*args)
    def __setitem__(*args): return _core.VectorDouble___setitem__(*args)
    def append(*args): return _core.VectorDouble_append(*args)
    def empty(*args): return _core.VectorDouble_empty(*args)
    def size(*args): return _core.VectorDouble_size(*args)
    def clear(*args): return _core.VectorDouble_clear(*args)
    def swap(*args): return _core.VectorDouble_swap(*args)
    def get_allocator(*args): return _core.VectorDouble_get_allocator(*args)
    def begin(*args): return _core.VectorDouble_begin(*args)
    def end(*args): return _core.VectorDouble_end(*args)
    def rbegin(*args): return _core.VectorDouble_rbegin(*args)
    def rend(*args): return _core.VectorDouble_rend(*args)
    def pop_back(*args): return _core.VectorDouble_pop_back(*args)
    def erase(*args): return _core.VectorDouble_erase(*args)
    def __init__(self, *args): 
        this = _core.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _core.VectorDouble_push_back(*args)
    def front(*args): return _core.VectorDouble_front(*args)
    def back(*args): return _core.VectorDouble_back(*args)
    def assign(*args): return _core.VectorDouble_assign(*args)
    def resize(*args): return _core.VectorDouble_resize(*args)
    def insert(*args): return _core.VectorDouble_insert(*args)
    def reserve(*args): return _core.VectorDouble_reserve(*args)
    def capacity(*args): return _core.VectorDouble_capacity(*args)
    __swig_destroy__ = _core.delete_VectorDouble
    __del__ = lambda self : None;
VectorDouble_swigregister = _core.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr
    def iterator(*args): return _core.VectorFloat_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _core.VectorFloat___nonzero__(*args)
    def __len__(*args): return _core.VectorFloat___len__(*args)
    def pop(*args): return _core.VectorFloat_pop(*args)
    def __getslice__(*args): return _core.VectorFloat___getslice__(*args)
    def __setslice__(*args): return _core.VectorFloat___setslice__(*args)
    def __delslice__(*args): return _core.VectorFloat___delslice__(*args)
    def __delitem__(*args): return _core.VectorFloat___delitem__(*args)
    def __getitem__(*args): return _core.VectorFloat___getitem__(*args)
    def __setitem__(*args): return _core.VectorFloat___setitem__(*args)
    def append(*args): return _core.VectorFloat_append(*args)
    def empty(*args): return _core.VectorFloat_empty(*args)
    def size(*args): return _core.VectorFloat_size(*args)
    def clear(*args): return _core.VectorFloat_clear(*args)
    def swap(*args): return _core.VectorFloat_swap(*args)
    def get_allocator(*args): return _core.VectorFloat_get_allocator(*args)
    def begin(*args): return _core.VectorFloat_begin(*args)
    def end(*args): return _core.VectorFloat_end(*args)
    def rbegin(*args): return _core.VectorFloat_rbegin(*args)
    def rend(*args): return _core.VectorFloat_rend(*args)
    def pop_back(*args): return _core.VectorFloat_pop_back(*args)
    def erase(*args): return _core.VectorFloat_erase(*args)
    def __init__(self, *args): 
        this = _core.new_VectorFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _core.VectorFloat_push_back(*args)
    def front(*args): return _core.VectorFloat_front(*args)
    def back(*args): return _core.VectorFloat_back(*args)
    def assign(*args): return _core.VectorFloat_assign(*args)
    def resize(*args): return _core.VectorFloat_resize(*args)
    def insert(*args): return _core.VectorFloat_insert(*args)
    def reserve(*args): return _core.VectorFloat_reserve(*args)
    def capacity(*args): return _core.VectorFloat_capacity(*args)
    __swig_destroy__ = _core.delete_VectorFloat
    __del__ = lambda self : None;
VectorFloat_swigregister = _core.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorPUChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPUChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPUChar, name)
    __repr__ = _swig_repr
    def iterator(*args): return _core.VectorPUChar_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _core.VectorPUChar___nonzero__(*args)
    def __len__(*args): return _core.VectorPUChar___len__(*args)
    def pop(*args): return _core.VectorPUChar_pop(*args)
    def __getslice__(*args): return _core.VectorPUChar___getslice__(*args)
    def __setslice__(*args): return _core.VectorPUChar___setslice__(*args)
    def __delslice__(*args): return _core.VectorPUChar___delslice__(*args)
    def __delitem__(*args): return _core.VectorPUChar___delitem__(*args)
    def __getitem__(*args): return _core.VectorPUChar___getitem__(*args)
    def __setitem__(*args): return _core.VectorPUChar___setitem__(*args)
    def append(*args): return _core.VectorPUChar_append(*args)
    def empty(*args): return _core.VectorPUChar_empty(*args)
    def size(*args): return _core.VectorPUChar_size(*args)
    def clear(*args): return _core.VectorPUChar_clear(*args)
    def swap(*args): return _core.VectorPUChar_swap(*args)
    def get_allocator(*args): return _core.VectorPUChar_get_allocator(*args)
    def begin(*args): return _core.VectorPUChar_begin(*args)
    def end(*args): return _core.VectorPUChar_end(*args)
    def rbegin(*args): return _core.VectorPUChar_rbegin(*args)
    def rend(*args): return _core.VectorPUChar_rend(*args)
    def pop_back(*args): return _core.VectorPUChar_pop_back(*args)
    def erase(*args): return _core.VectorPUChar_erase(*args)
    def __init__(self, *args): 
        this = _core.new_VectorPUChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _core.VectorPUChar_push_back(*args)
    def front(*args): return _core.VectorPUChar_front(*args)
    def back(*args): return _core.VectorPUChar_back(*args)
    def assign(*args): return _core.VectorPUChar_assign(*args)
    def resize(*args): return _core.VectorPUChar_resize(*args)
    def insert(*args): return _core.VectorPUChar_insert(*args)
    def reserve(*args): return _core.VectorPUChar_reserve(*args)
    def capacity(*args): return _core.VectorPUChar_capacity(*args)
    __swig_destroy__ = _core.delete_VectorPUChar
    __del__ = lambda self : None;
VectorPUChar_swigregister = _core.VectorPUChar_swigregister
VectorPUChar_swigregister(VectorPUChar)

VISUS_LEFT_RIGHT = _core.VISUS_LEFT_RIGHT
VISUS_RIGHT_LEFT = _core.VISUS_RIGHT_LEFT
VISUS_TOP_BOTTOM = _core.VISUS_TOP_BOTTOM
VISUS_BOTTOM_TOP = _core.VISUS_BOTTOM_TOP
class VisusText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusText, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusText_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusText_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusText_XML_TAG_get, _core.VisusText_XML_TAG_set)
    def __init__(self, *args): 
        this = _core.new_VisusText(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusText
    __del__ = lambda self : None;
    def text(*args): return _core.VisusText_text(*args)
    def font(*args): return _core.VisusText_font(*args)
    def orientation(*args): return _core.VisusText_orientation(*args)
    def bbox(*args): return _core.VisusText_bbox(*args)
    def render(*args): return _core.VisusText_render(*args)
VisusText_swigregister = _core.VisusText_swigregister
VisusText_swigregister(VisusText)

class VisusTransBase2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusTransBase2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusTransBase2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusTransBase2_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusTransBase2_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusTransBase2_XML_TAG_get, _core.VisusTransBase2_XML_TAG_set)
    sMatrixDimension = _core.VisusTransBase2_sMatrixDimension
    sMatrixSize = _core.VisusTransBase2_sMatrixSize
    def __init__(self, *args): 
        this = _core.new_VisusTransBase2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusTransBase2
    __del__ = lambda self : None;
    def __eq__(*args): return _core.VisusTransBase2___eq__(*args)
    def __ne__(*args): return _core.VisusTransBase2___ne__(*args)
    def __imul__(*args): return _core.VisusTransBase2___imul__(*args)
    def leftMultiply(*args): return _core.VisusTransBase2_leftMultiply(*args)
    def rotationSpeed(*args): return _core.VisusTransBase2_rotationSpeed(*args)
    def translationSpeed(*args): return _core.VisusTransBase2_translationSpeed(*args)
    def scalingSpeed(*args): return _core.VisusTransBase2_scalingSpeed(*args)
    def setRotation(*args): return _core.VisusTransBase2_setRotation(*args)
    def setTranslation(*args): return _core.VisusTransBase2_setTranslation(*args)
    def map(*args): return _core.VisusTransBase2_map(*args)
    def inverseMap(*args): return _core.VisusTransBase2_inverseMap(*args)
    def transform(*args): return _core.VisusTransBase2_transform(*args)
    def inverseTransform(*args): return _core.VisusTransBase2_inverseTransform(*args)
    def scale(*args): return _core.VisusTransBase2_scale(*args)
    def assign(*args): return _core.VisusTransBase2_assign(*args)
    def __getitem__(*args): return _core.VisusTransBase2___getitem__(*args)
    def __setitem__(*args): return _core.VisusTransBase2___setitem__(*args)
VisusTransBase2_swigregister = _core.VisusTransBase2_swigregister
VisusTransBase2_swigregister(VisusTransBase2)
VisusTransBase2.sRotationSpeedDefault = _core.cvar.VisusTransBase2_sRotationSpeedDefault
VisusTransBase2.sTranslationSpeedDefault = _core.cvar.VisusTransBase2_sTranslationSpeedDefault
VisusTransBase2.sScalingSpeedDefault = _core.cvar.VisusTransBase2_sScalingSpeedDefault
VisusTransBase2.sFudgeFactor = _core.cvar.VisusTransBase2_sFudgeFactor

class VisusTransformation2D(VisusTransBase2):
    __swig_setmethods__ = {}
    for _s in [VisusTransBase2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusTransformation2D, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusTransBase2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusTransformation2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusTransformation2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusTransformation2D
    __del__ = lambda self : None;
    def rotate(*args): return _core.VisusTransformation2D_rotate(*args)
    def translate(*args): return _core.VisusTransformation2D_translate(*args)
    def inverseMap(*args): return _core.VisusTransformation2D_inverseMap(*args)
    def inverseTransform(*args): return _core.VisusTransformation2D_inverseTransform(*args)
VisusTransformation2D_swigregister = _core.VisusTransformation2D_swigregister
VisusTransformation2D_swigregister(VisusTransformation2D)

class VisusTransBase3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusTransBase3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusTransBase3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusTransBase3_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusTransBase3_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusTransBase3_XML_TAG_get, _core.VisusTransBase3_XML_TAG_set)
    sMatrixDimension = _core.VisusTransBase3_sMatrixDimension
    sMatrixSize = _core.VisusTransBase3_sMatrixSize
    def __init__(self, *args): 
        this = _core.new_VisusTransBase3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusTransBase3
    __del__ = lambda self : None;
    def __eq__(*args): return _core.VisusTransBase3___eq__(*args)
    def __ne__(*args): return _core.VisusTransBase3___ne__(*args)
    def __imul__(*args): return _core.VisusTransBase3___imul__(*args)
    def leftMultiply(*args): return _core.VisusTransBase3_leftMultiply(*args)
    def rotationSpeed(*args): return _core.VisusTransBase3_rotationSpeed(*args)
    def translationSpeed(*args): return _core.VisusTransBase3_translationSpeed(*args)
    def scalingSpeed(*args): return _core.VisusTransBase3_scalingSpeed(*args)
    def setRotation(*args): return _core.VisusTransBase3_setRotation(*args)
    def setTranslation(*args): return _core.VisusTransBase3_setTranslation(*args)
    def map(*args): return _core.VisusTransBase3_map(*args)
    def inverseMap(*args): return _core.VisusTransBase3_inverseMap(*args)
    def transform(*args): return _core.VisusTransBase3_transform(*args)
    def inverseTransform(*args): return _core.VisusTransBase3_inverseTransform(*args)
    def scale(*args): return _core.VisusTransBase3_scale(*args)
    def assign(*args): return _core.VisusTransBase3_assign(*args)
    def __getitem__(*args): return _core.VisusTransBase3___getitem__(*args)
    def __setitem__(*args): return _core.VisusTransBase3___setitem__(*args)
VisusTransBase3_swigregister = _core.VisusTransBase3_swigregister
VisusTransBase3_swigregister(VisusTransBase3)
VisusTransBase3.sRotationSpeedDefault = _core.cvar.VisusTransBase3_sRotationSpeedDefault
VisusTransBase3.sTranslationSpeedDefault = _core.cvar.VisusTransBase3_sTranslationSpeedDefault
VisusTransBase3.sScalingSpeedDefault = _core.cvar.VisusTransBase3_sScalingSpeedDefault
VisusTransBase3.sFudgeFactor = _core.cvar.VisusTransBase3_sFudgeFactor

FREE_TRANSLATION = _core.FREE_TRANSLATION
ALIGNED_TRANSLATION = _core.ALIGNED_TRANSLATION
VISUS_ORIENTATION_XY = _core.VISUS_ORIENTATION_XY
VISUS_ORIENTATION_XZ = _core.VISUS_ORIENTATION_XZ
VISUS_ORIENTATION_YZ = _core.VISUS_ORIENTATION_YZ
class VisusTransformation3D(VisusTransBase3):
    __swig_setmethods__ = {}
    for _s in [VisusTransBase3]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusTransformation3D, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusTransBase3]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusTransformation3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusTransformation3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusTransformation3D
    __del__ = lambda self : None;
    def translationStyle(*args): return _core.VisusTransformation3D_translationStyle(*args)
    def rotate(*args): return _core.VisusTransformation3D_rotate(*args)
    def translate(*args): return _core.VisusTransformation3D_translate(*args)
    def translateFreely(*args): return _core.VisusTransformation3D_translateFreely(*args)
    def translateAligned(*args): return _core.VisusTransformation3D_translateAligned(*args)
    def translation(*args): return _core.VisusTransformation3D_translation(*args)
    def freeTranslation(*args): return _core.VisusTransformation3D_freeTranslation(*args)
    def alignedTranslation(*args): return _core.VisusTransformation3D_alignedTranslation(*args)
    def scale(*args): return _core.VisusTransformation3D_scale(*args)
    def _print(*args): return _core.VisusTransformation3D__print(*args)
    def normalize(*args): return _core.VisusTransformation3D_normalize(*args)
    def inverseMap(*args): return _core.VisusTransformation3D_inverseMap(*args)
    def inverseTransform(*args): return _core.VisusTransformation3D_inverseTransform(*args)
    def __mul__(*args): return _core.VisusTransformation3D___mul__(*args)
    def save(*args): return _core.VisusTransformation3D_save(*args)
    def load(*args): return _core.VisusTransformation3D_load(*args)
VisusTransformation3D_swigregister = _core.VisusTransformation3D_swigregister
VisusTransformation3D_swigregister(VisusTransformation3D)
translationMatrix = _core.translationMatrix
scaleMatrix = _core.scaleMatrix

xyPlane = _core.xyPlane
xzPlane = _core.xzPlane
yzPlane = _core.yzPlane
slerp = _core.slerp
ASCII = _core.ASCII
BASE64 = _core.BASE64
EXTERNAL_FILE = _core.EXTERNAL_FILE
class VisusXMLInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusXMLInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusXMLInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sPRODUCER_TAG"] = _core.VisusXMLInterface_sPRODUCER_TAG_set
    __swig_getmethods__["sPRODUCER_TAG"] = _core.VisusXMLInterface_sPRODUCER_TAG_get
    if _newclass:sPRODUCER_TAG = _swig_property(_core.VisusXMLInterface_sPRODUCER_TAG_get, _core.VisusXMLInterface_sPRODUCER_TAG_set)
    __swig_setmethods__["sWriteXMLDataStorage"] = _core.VisusXMLInterface_sWriteXMLDataStorage_set
    __swig_getmethods__["sWriteXMLDataStorage"] = _core.VisusXMLInterface_sWriteXMLDataStorage_get
    if _newclass:sWriteXMLDataStorage = _swig_property(_core.VisusXMLInterface_sWriteXMLDataStorage_get, _core.VisusXMLInterface_sWriteXMLDataStorage_set)
    def write(*args): return _core.VisusXMLInterface_write(*args)
    def read(*args): return _core.VisusXMLInterface_read(*args)
    def extractDataDescriptions(*args): return _core.VisusXMLInterface_extractDataDescriptions(*args)
    __swig_getmethods__["registerDataDescription"] = lambda x: _core.VisusXMLInterface_registerDataDescription
    if _newclass:registerDataDescription = staticmethod(_core.VisusXMLInterface_registerDataDescription)
    def __init__(self, *args): 
        this = _core.new_VisusXMLInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusXMLInterface
    __del__ = lambda self : None;
VisusXMLInterface_swigregister = _core.VisusXMLInterface_swigregister
VisusXMLInterface_swigregister(VisusXMLInterface)
VisusXMLInterface.sVersion = _core.cvar.VisusXMLInterface_sVersion
VisusXMLInterface_registerDataDescription = _core.VisusXMLInterface_registerDataDescription

class VisusIntTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusIntTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusIntTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusIntTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusIntTime
    __del__ = lambda self : None;
    def type(*args): return _core.VisusIntTime_type(*args)
VisusIntTime_swigregister = _core.VisusIntTime_swigregister
VisusIntTime_swigregister(VisusIntTime)

class VisusDoubleTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusDoubleTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusDoubleTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusDoubleTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def type(*args): return _core.VisusDoubleTime_type(*args)
    __swig_destroy__ = _core.delete_VisusDoubleTime
    __del__ = lambda self : None;
VisusDoubleTime_swigregister = _core.VisusDoubleTime_swigregister
VisusDoubleTime_swigregister(VisusDoubleTime)

class VisusGlobalTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusGlobalTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusGlobalTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XML_TAG"] = _core.VisusGlobalTime_XML_TAG_set
    __swig_getmethods__["XML_TAG"] = _core.VisusGlobalTime_XML_TAG_get
    if _newclass:XML_TAG = _swig_property(_core.VisusGlobalTime_XML_TAG_get, _core.VisusGlobalTime_XML_TAG_set)
    def __init__(self, *args): 
        this = _core.new_VisusGlobalTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusGlobalTime
    __del__ = lambda self : None;
    def __eq__(*args): return _core.VisusGlobalTime___eq__(*args)
    def __ne__(*args): return _core.VisusGlobalTime___ne__(*args)
    def type(*args): return _core.VisusGlobalTime_type(*args)
    def time(*args): return _core.VisusGlobalTime_time(*args)
    def begin(*args): return _core.VisusGlobalTime_begin(*args)
    def end(*args): return _core.VisusGlobalTime_end(*args)
    def step(*args): return _core.VisusGlobalTime_step(*args)
    def toString(*args): return _core.VisusGlobalTime_toString(*args)
    def timeStep(*args): return _core.VisusGlobalTime_timeStep(*args)
    def inc(*args): return _core.VisusGlobalTime_inc(*args)
    def dec(*args): return _core.VisusGlobalTime_dec(*args)
    def relativeTime(*args): return _core.VisusGlobalTime_relativeTime(*args)
    def timeIndex(*args): return _core.VisusGlobalTime_timeIndex(*args)
    def initializeFromString(*args): return _core.VisusGlobalTime_initializeFromString(*args)
VisusGlobalTime_swigregister = _core.VisusGlobalTime_swigregister
VisusGlobalTime_swigregister(VisusGlobalTime)

class VisusProjection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusProjection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusProjection, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_VisusProjection
    __del__ = lambda self : None;
    def clone(*args): return _core.VisusProjection_clone(*args)
    def declareParameters(*args): return _core.VisusProjection_declareParameters(*args)
    def updateShared(*args): return _core.VisusProjection_updateShared(*args)
    def preferedInputUnit(*args): return _core.VisusProjection_preferedInputUnit(*args)
    def outputUnits(*args): return _core.VisusProjection_outputUnits(*args)
    def isCompatibleInput(*args): return _core.VisusProjection_isCompatibleInput(*args)
    def project(*args): return _core.VisusProjection_project(*args)
VisusProjection_swigregister = _core.VisusProjection_swigregister
VisusProjection_swigregister(VisusProjection)

class VisusSphereProjection(VisusProjection):
    __swig_setmethods__ = {}
    for _s in [VisusProjection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusSphereProjection, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusProjection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusSphereProjection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_VisusSphereProjection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_VisusSphereProjection
    __del__ = lambda self : None;
    def clone(*args): return _core.VisusSphereProjection_clone(*args)
    def declareParameters(*args): return _core.VisusSphereProjection_declareParameters(*args)
    def updateShared(*args): return _core.VisusSphereProjection_updateShared(*args)
    def preferedInputUnit(*args): return _core.VisusSphereProjection_preferedInputUnit(*args)
    def outputUnits(*args): return _core.VisusSphereProjection_outputUnits(*args)
    def isCompatibleInput(*args): return _core.VisusSphereProjection_isCompatibleInput(*args)
VisusSphereProjection_swigregister = _core.VisusSphereProjection_swigregister
VisusSphereProjection_swigregister(VisusSphereProjection)

VISUS_ISOVALUE_TYPEID = _core.VISUS_ISOVALUE_TYPEID
VISUS_BOUNDINGBOX_TYPEID = _core.VISUS_BOUNDINGBOX_TYPEID
VISUS_FONT_TYPEID = _core.VISUS_FONT_TYPEID
VISUS_TRANSFORMATION2D_TYPEID = _core.VISUS_TRANSFORMATION2D_TYPEID
VISUS_TRANSFORMATION3D_TYPEID = _core.VISUS_TRANSFORMATION3D_TYPEID
VISUS_DATAREQUEST_TYPEID = _core.VISUS_DATAREQUEST_TYPEID
VISUS_DATADESCRIPTION_TYPEID = _core.VISUS_DATADESCRIPTION_TYPEID
VISUS_FIELDINDEX_TYPEID = _core.VISUS_FIELDINDEX_TYPEID
VISUS_COLORMAP_TYPEID = _core.VISUS_COLORMAP_TYPEID
VISUS_COLOR_TYPEID = _core.VISUS_COLOR_TYPEID
VISUS_CAMERA_TYPEID = _core.VISUS_CAMERA_TYPEID
VISUS_EARTHRADIUS_TYPEID = _core.VISUS_EARTHRADIUS_TYPEID
VISUS_GLOBALTIME_TYPEID = _core.VISUS_GLOBALTIME_TYPEID
VISUS_OPENGLSTATE_TYPEID = _core.VISUS_OPENGLSTATE_TYPEID
VISUS_NUM_TYPEIDS = _core.VISUS_NUM_TYPEIDS


