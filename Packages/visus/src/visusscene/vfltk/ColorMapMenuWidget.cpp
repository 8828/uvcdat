// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "ColorMapMenuWidget.h"

inline void ColorMapMenuWidget::cb_Banded_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::banded();
  commit();
}
void ColorMapMenuWidget::cb_Banded(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Banded_i(o,v);
}

inline void ColorMapMenuWidget::cb_Greyscale_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::grey_scale();
  commit();
}
void ColorMapMenuWidget::cb_Greyscale(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Greyscale_i(o,v);
}

inline void ColorMapMenuWidget::cb_Grey_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::grey_ramp();
  commit();
}
void ColorMapMenuWidget::cb_Grey(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Grey_i(o,v);
}

inline void ColorMapMenuWidget::cb_Blue_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::bgry();
  commit();
}
void ColorMapMenuWidget::cb_Blue(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Blue_i(o,v);
}

inline void ColorMapMenuWidget::cb_Blue1_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::bry();
  commit();
}
void ColorMapMenuWidget::cb_Blue1(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Blue1_i(o,v);
}

inline void ColorMapMenuWidget::cb_Gamma_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::gamma();
  commit();
}
void ColorMapMenuWidget::cb_Gamma(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Gamma_i(o,v);
}

inline void ColorMapMenuWidget::cb_Hot1_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::hot1();
  commit();
}
void ColorMapMenuWidget::cb_Hot1(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Hot1_i(o,v);
}

inline void ColorMapMenuWidget::cb_Hot2_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::hot2();
  commit();
}
void ColorMapMenuWidget::cb_Hot2(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Hot2_i(o,v);
}

inline void ColorMapMenuWidget::cb_Ice_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::ice();
  commit();
}
void ColorMapMenuWidget::cb_Ice(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Ice_i(o,v);
}

inline void ColorMapMenuWidget::cb_Light_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::lighthues();
  commit();
}
void ColorMapMenuWidget::cb_Light(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Light_i(o,v);
}

inline void ColorMapMenuWidget::cb_LUT_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::lut16();
  commit();
}
void ColorMapMenuWidget::cb_LUT(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_LUT_i(o,v);
}

inline void ColorMapMenuWidget::cb_Rich_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::rich();
  commit();
}
void ColorMapMenuWidget::cb_Rich(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Rich_i(o,v);
}

inline void ColorMapMenuWidget::cb_Smooth_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::smooth_rich();
  commit();
}
void ColorMapMenuWidget::cb_Smooth(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Smooth_i(o,v);
}

inline void ColorMapMenuWidget::cb_Custom_i(fltk::Item*, void*) {
  value() = VisusDefaultColorMaps::banded();
  commit();
}
void ColorMapMenuWidget::cb_Custom(fltk::Item* o, void* v) {
  ((ColorMapMenuWidget*)(o->parent()->parent()->user_data()))->cb_Custom_i(o,v);
}

ColorMapMenuWidget::ColorMapMenuWidget(pVisusGroup node,fltk::Window* parent) : SharedValueMenu<VisusColorMap>(node) {
  createMenu(parent);
}

ColorMapMenuWidget::ColorMapMenuWidget(VisusColorMap& map,fltk::Window* parent) : SharedValueMenu<VisusColorMap>(map) {
  createMenu(parent);
}

ColorMapMenuWidget::~ColorMapMenuWidget() {
}

FLTKSubWindow* ColorMapMenuWidget::createMenu(fltk::Window* parent) {
  FLTKSubWindow* w;
   {FLTKSubWindow* o = mMenu = new FLTKSubWindow(130, 50);
    w = o;
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Choice* o = mStyle = new fltk::Choice(14, 15, 101, 25, "Color Map");
      o->labelfont(fltk::HELVETICA_BOLD);
      o->align(fltk::ALIGN_TOP);
      o->begin();
       {fltk::Item* o = new fltk::Item("Banded");
        o->callback((fltk::Callback*)cb_Banded);
      }
       {fltk::Item* o = new fltk::Item("Greyscale");
        o->callback((fltk::Callback*)cb_Greyscale);
      }
       {fltk::Item* o = new fltk::Item("Grey Ramp");
        o->callback((fltk::Callback*)cb_Grey);
      }
       {fltk::Item* o = new fltk::Item("Blue Green Red Yellow");
        o->callback((fltk::Callback*)cb_Blue);
      }
       {fltk::Item* o = new fltk::Item("Blue Red Yellow");
        o->callback((fltk::Callback*)cb_Blue1);
      }
       {fltk::Item* o = new fltk::Item("Gamma");
        o->callback((fltk::Callback*)cb_Gamma);
      }
       {fltk::Item* o = new fltk::Item("Hot1");
        o->callback((fltk::Callback*)cb_Hot1);
      }
       {fltk::Item* o = new fltk::Item("Hot2");
        o->callback((fltk::Callback*)cb_Hot2);
      }
       {fltk::Item* o = new fltk::Item("Ice");
        o->callback((fltk::Callback*)cb_Ice);
      }
       {fltk::Item* o = new fltk::Item("Light Hues");
        o->callback((fltk::Callback*)cb_Light);
      }
       {fltk::Item* o = new fltk::Item("LUT 16");
        o->callback((fltk::Callback*)cb_LUT);
      }
       {fltk::Item* o = new fltk::Item("Rich");
        o->callback((fltk::Callback*)cb_Rich);
      }
       {fltk::Item* o = new fltk::Item("Smooth Rich");
        o->callback((fltk::Callback*)cb_Smooth);
      }
       {fltk::Item* o = new fltk::Item("Custom");
        o->callback((fltk::Callback*)cb_Custom);
      }
      o->end();
    }
    o->end();
    o->set_non_modal();
    o->resizable(o);
  }
  mMenu->show_inside(parent);
  return  w;
}
