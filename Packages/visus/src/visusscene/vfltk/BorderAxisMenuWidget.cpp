// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "BorderAxisMenuWidget.h"

inline void BorderAxisMenuWidget::cb_mLegend_i(fltk::Input* o, void*) {
  value().legendText(((fltk::Input*)o)->text());
  commit();
}
void BorderAxisMenuWidget::cb_mLegend(fltk::Input* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mLegend_i(o,v);
}

inline void BorderAxisMenuWidget::cb_Change_i(fltk::Button*, void*) {
  VisusFont font;
  FontMenuWidget* popup;
  
  font = value().legendFont();
  popup = new FontMenuWidget(font);
  popup->mMenu->hotspot(popup->mMenu);
  popup->mMenu->exec();
  value().legendFont(font);
  commit();
  
  delete popup;
}
void BorderAxisMenuWidget::cb_Change(fltk::Button* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_Change_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mLOffset_i(fltk::ValueInput* o, void*) {
  value().legendOffset(((fltk::ValueInput*)o)->value());
  commit();
}
void BorderAxisMenuWidget::cb_mLOffset(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mLOffset_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mLPos_i(fltk::Choice*, void*) {
  value().legendPosition((AXISSide)(mLPos->value()));
  commit();
}
void BorderAxisMenuWidget::cb_mLPos(fltk::Choice* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mLPos_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mLAlign_i(fltk::Choice*, void*) {
  value().legendAlignment((AXISAlignment)(mLAlign->value()));
  commit();
}
void BorderAxisMenuWidget::cb_mLAlign(fltk::Choice* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mLAlign_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mLActive_i(fltk::CheckButton*, void*) {
  value().drawLegend(mLActive->value());
  commit();
}
void BorderAxisMenuWidget::cb_mLActive(fltk::CheckButton* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mLActive_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTickTemplate_i(fltk::Input*, void*) {
  value().labelText(mTickTemplate->text());
  commit();
}
void BorderAxisMenuWidget::cb_mTickTemplate(fltk::Input* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mTickTemplate_i(o,v);
}

inline void BorderAxisMenuWidget::cb_Change1_i(fltk::Button*, void*) {
  VisusFont font;
  FontMenuWidget* popup;
  
  font = value().labelFont();
  popup = new FontMenuWidget(font);
  popup->mMenu->hotspot(popup->mMenu);
  popup->mMenu->exec();
  value().labelFont(font);
  commit();
  
  delete popup;
}
void BorderAxisMenuWidget::cb_Change1(fltk::Button* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_Change1_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTOffset_i(fltk::ValueInput*, void*) {
  value().labelOffset(mTOffset->value());
  commit();
}
void BorderAxisMenuWidget::cb_mTOffset(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mTOffset_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTPos_i(fltk::Choice*, void*) {
  value().labelPosition((AXISSide)mTPos->value());
  commit();
}
void BorderAxisMenuWidget::cb_mTPos(fltk::Choice* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mTPos_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTAlign_i(fltk::Choice*, void*) {
  value().labelAlignment((AXISAlignment)mTAlign->value());
  commit();
}
void BorderAxisMenuWidget::cb_mTAlign(fltk::Choice* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mTAlign_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTActive_i(fltk::CheckButton*, void*) {
  value().drawLabels(mTActive->value());
  commit();
}
void BorderAxisMenuWidget::cb_mTActive(fltk::CheckButton* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->user_data()))->cb_mTActive_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mMTCount_i(fltk::ValueInput*, void*) {
  value().majorTicks(mMTCount->value());
  commit();
}
void BorderAxisMenuWidget::cb_mMTCount(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->parent()->user_data()))->cb_mMTCount_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mMTLength_i(fltk::ValueInput*, void*) {
  value().majorTickLength(mMTLength->value());
  commit();
}
void BorderAxisMenuWidget::cb_mMTLength(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->parent()->user_data()))->cb_mMTLength_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mMTWidth_i(fltk::ValueInput*, void*) {
  value().majorTickThickness(mMTWidth->value());
  commit();
}
void BorderAxisMenuWidget::cb_mMTWidth(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->parent()->user_data()))->cb_mMTWidth_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTCount_i(fltk::ValueInput*, void*) {
  value().minorTicks(mTCount->value());
  commit();
}
void BorderAxisMenuWidget::cb_mTCount(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->parent()->user_data()))->cb_mTCount_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTLength_i(fltk::ValueInput*, void*) {
  value().minorTickLength(mTLength->value());
  commit();
}
void BorderAxisMenuWidget::cb_mTLength(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->parent()->user_data()))->cb_mTLength_i(o,v);
}

inline void BorderAxisMenuWidget::cb_mTWidth_i(fltk::ValueInput*, void*) {
  value().minorTickThickness(mTWidth->value());
  commit();
}
void BorderAxisMenuWidget::cb_mTWidth(fltk::ValueInput* o, void* v) {
  ((BorderAxisMenuWidget*)(o->parent()->parent()->parent()->user_data()))->cb_mTWidth_i(o,v);
}

BorderAxisMenuWidget::BorderAxisMenuWidget(VisusBorderAxis& axis,fltk::Window* parent) : ValueMenu<VisusBorderAxis>(axis) {
  createMenu(parent);
}

BorderAxisMenuWidget::~BorderAxisMenuWidget() {
}

FLTKSubWindow* BorderAxisMenuWidget::createMenu(fltk::Window* parent) {
  FLTKSubWindow* w;
   {FLTKSubWindow* o = mMenu = new FLTKSubWindow(350, 350);
    w = o;
    o->buttonbox(fltk::EMBOSSED_BOX);
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = new fltk::Group(5, 19, 335, 102, "Legend");
      o->box(fltk::ENGRAVED_BOX);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->begin();
       {fltk::Input* o = mLegend = new fltk::Input(15, 9, 160, 30);
        o->labelfont(fltk::HELVETICA_BOLD);
        o->callback((fltk::Callback*)cb_mLegend);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::Button* o = new fltk::Button(180, 9, 90, 30, "Change Font");
        o->box(fltk::EMBOSSED_BOX);
        o->callback((fltk::Callback*)cb_Change);
      }
       {fltk::ValueInput* o = mLOffset = new fltk::ValueInput(15, 64, 45, 25, "Offset");
        o->maximum(10);
        o->step(0.1);
        o->callback((fltk::Callback*)cb_mLOffset);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      }
       {fltk::Choice* o = mLPos = new fltk::Choice(65, 64, 95, 25, "Position");
        o->callback((fltk::Callback*)cb_mLPos);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->begin();
        new fltk::Item("Low Side");
         {fltk::Item* o = new fltk::Item("High Side");
          o->set_vertical();
        }
        new fltk::Item("Both Sides");
        o->end();
      }
       {fltk::Choice* o = mLAlign = new fltk::Choice(180, 64, 110, 25, "Alignment");
        o->callback((fltk::Callback*)cb_mLAlign);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->begin();
        new fltk::Item("Center");
         {fltk::Item* o = new fltk::Item("Left");
          o->set_vertical();
        }
        new fltk::Item("Right");
        o->end();
      }
       {fltk::CheckButton* o = mLActive = new fltk::CheckButton(310, 9, 25, 30, "Show");
        o->set_vertical();
        o->callback((fltk::Callback*)cb_mLActive);
        o->align(fltk::ALIGN_LEFT);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(5, 138, 340, 202, "Tick Marks");
      o->box(fltk::ENGRAVED_BOX);
      o->labelfont(fltk::HELVETICA_BOLD);
      o->begin();
       {fltk::Input* o = mTickTemplate = new fltk::Input(10, 14, 160, 31);
        o->labelfont(fltk::HELVETICA_BOLD);
        o->textsize(11);
        o->callback((fltk::Callback*)cb_mTickTemplate);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::Button* o = new fltk::Button(180, 15, 85, 30, "Change Font");
        o->box(fltk::EMBOSSED_BOX);
        o->callback((fltk::Callback*)cb_Change1);
      }
       {fltk::ValueInput* o = mTOffset = new fltk::ValueInput(10, 70, 45, 25, "Offset");
        o->maximum(10);
        o->step(0.1);
        o->callback((fltk::Callback*)cb_mTOffset);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      }
       {fltk::Choice* o = mTPos = new fltk::Choice(65, 70, 95, 25, "Position");
        o->callback((fltk::Callback*)cb_mTPos);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->begin();
        new fltk::Item("Low Side");
         {fltk::Item* o = new fltk::Item("High Side");
          o->set_vertical();
        }
        new fltk::Item("Both Sides");
        o->end();
      }
       {fltk::Choice* o = mTAlign = new fltk::Choice(170, 70, 110, 25, "Alignment");
        o->callback((fltk::Callback*)cb_mTAlign);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->begin();
        new fltk::Item("Center");
         {fltk::Item* o = new fltk::Item("Left");
          o->set_vertical();
        }
        new fltk::Item("Right");
        o->end();
      }
       {fltk::CheckButton* o = mTActive = new fltk::CheckButton(305, 15, 25, 30, "Show");
        o->set_vertical();
        o->callback((fltk::Callback*)cb_mTActive);
        o->align(fltk::ALIGN_LEFT);
      }
       {fltk::Group* o = new fltk::Group(90, 115, 250, 31, "Major Ticks  ");
        o->align(fltk::ALIGN_LEFT);
        o->begin();
         {fltk::ValueInput* o = mMTCount = new fltk::ValueInput(0, 0, 55, 25, "Count");
          o->step(1);
          o->callback((fltk::Callback*)cb_mMTCount);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        }
         {fltk::ValueInput* o = mMTLength = new fltk::ValueInput(65, 0, 55, 25, "Length");
          o->step(0.01);
          o->callback((fltk::Callback*)cb_mMTLength);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        }
         {fltk::ValueInput* o = mMTWidth = new fltk::ValueInput(135, 0, 55, 25, "Width");
          o->step(0.01);
          o->callback((fltk::Callback*)cb_mMTWidth);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        }
        o->end();
      }
       {fltk::Group* o = new fltk::Group(90, 166, 200, 25, "Minor Ticks  ");
        o->align(fltk::ALIGN_LEFT);
        o->begin();
         {fltk::ValueInput* o = mTCount = new fltk::ValueInput(0, 0, 55, 25, "Count");
          o->step(1);
          o->callback((fltk::Callback*)cb_mTCount);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        }
         {fltk::ValueInput* o = mTLength = new fltk::ValueInput(65, 0, 55, 25, "Length");
          o->step(0.01);
          o->callback((fltk::Callback*)cb_mTLength);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        }
         {fltk::ValueInput* o = mTWidth = new fltk::ValueInput(135, 0, 55, 25, "Width");
          o->step(0.01);
          o->callback((fltk::Callback*)cb_mTWidth);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->set_non_modal();
    o->resizable(o);
  }
  initLegend();
  initTickMarks();
  return  w;
}

void BorderAxisMenuWidget::initLegend() {
  mLegend->text(value().legendText());
  mLOffset->value(value().legendOffset());
  mLPos->value(value().legendPosition());
  mLAlign->value(value().legendAlignment());
  mLActive->value(value().drawLegend());
}

void BorderAxisMenuWidget::initTickMarks() {
  mTickTemplate->text(value().labelText());
  mTOffset->value(value().labelOffset());
  mTPos->value(value().labelPosition());
  mTAlign->value(value().labelAlignment());
  mTActive->value(value().drawLabels());
  mMTCount->value(value().majorTicks());
  mMTLength->value(value().majorTickLength());
  mMTWidth->value(value().majorTickThickness());
  mTCount->value(value().minorTicks());
  mTLength->value(value().minorTickLength());
  mTWidth->value(value().minorTickThickness());
}
