// generated by Fast Light User Interface Designer (fluid) version 2.1000

#ifndef BorderAxisMenuWidget_h
#define BorderAxisMenuWidget_h
#include "vfltk/ValueMenu.h"
#include "VisusBorderAxis.h"
#include "vfltk/FLTKSubWindow.h"
#include <fltk/Group.h>
#include <fltk/Input.h>
#include <fltk/Button.h>
#include "FontMenuWidget.h"
#include <fltk/ValueInput.h>
#include <fltk/Choice.h>
#include <fltk/Item.h>
#include <fltk/CheckButton.h>

class BorderAxisMenuWidget : public ValueMenu<VisusBorderAxis>  {
public:
  BorderAxisMenuWidget(VisusBorderAxis& axis,fltk::Window* parent=NULL) ;
  ~BorderAxisMenuWidget();
  FLTKSubWindow* createMenu(fltk::Window* parent);
  FLTKSubWindow *mMenu;
      fltk::Input *mLegend;
private:
      inline void cb_mLegend_i(fltk::Input*, void*);
      static void cb_mLegend(fltk::Input*, void*);
      inline void cb_Change_i(fltk::Button*, void*);
      static void cb_Change(fltk::Button*, void*);
public:
      fltk::ValueInput *mLOffset;
private:
      inline void cb_mLOffset_i(fltk::ValueInput*, void*);
      static void cb_mLOffset(fltk::ValueInput*, void*);
public:
      fltk::Choice *mLPos;
private:
      inline void cb_mLPos_i(fltk::Choice*, void*);
      static void cb_mLPos(fltk::Choice*, void*);
public:
      fltk::Choice *mLAlign;
private:
      inline void cb_mLAlign_i(fltk::Choice*, void*);
      static void cb_mLAlign(fltk::Choice*, void*);
public:
      fltk::CheckButton *mLActive;
private:
      inline void cb_mLActive_i(fltk::CheckButton*, void*);
      static void cb_mLActive(fltk::CheckButton*, void*);
public:
      fltk::Input *mTickTemplate;
private:
      inline void cb_mTickTemplate_i(fltk::Input*, void*);
      static void cb_mTickTemplate(fltk::Input*, void*);
      inline void cb_Change1_i(fltk::Button*, void*);
      static void cb_Change1(fltk::Button*, void*);
public:
      fltk::ValueInput *mTOffset;
private:
      inline void cb_mTOffset_i(fltk::ValueInput*, void*);
      static void cb_mTOffset(fltk::ValueInput*, void*);
public:
      fltk::Choice *mTPos;
private:
      inline void cb_mTPos_i(fltk::Choice*, void*);
      static void cb_mTPos(fltk::Choice*, void*);
public:
      fltk::Choice *mTAlign;
private:
      inline void cb_mTAlign_i(fltk::Choice*, void*);
      static void cb_mTAlign(fltk::Choice*, void*);
public:
      fltk::CheckButton *mTActive;
private:
      inline void cb_mTActive_i(fltk::CheckButton*, void*);
      static void cb_mTActive(fltk::CheckButton*, void*);
public:
        fltk::ValueInput *mMTCount;
private:
        inline void cb_mMTCount_i(fltk::ValueInput*, void*);
        static void cb_mMTCount(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *mMTLength;
private:
        inline void cb_mMTLength_i(fltk::ValueInput*, void*);
        static void cb_mMTLength(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *mMTWidth;
private:
        inline void cb_mMTWidth_i(fltk::ValueInput*, void*);
        static void cb_mMTWidth(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *mTCount;
private:
        inline void cb_mTCount_i(fltk::ValueInput*, void*);
        static void cb_mTCount(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *mTLength;
private:
        inline void cb_mTLength_i(fltk::ValueInput*, void*);
        static void cb_mTLength(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *mTWidth;
private:
        inline void cb_mTWidth_i(fltk::ValueInput*, void*);
        static void cb_mTWidth(fltk::ValueInput*, void*);
public:
  void initLegend();
  void initTickMarks();
};
#endif
