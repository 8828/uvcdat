// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "LabelNodeMenu.h"

inline void LabelNodeMenu::cb_mTextEditor_i(fltk::TextEditor* o, void*) {
  mNode->text(((fltk::TextEditor*)o)->text());
}
void LabelNodeMenu::cb_mTextEditor(fltk::TextEditor* o, void* v) {
  ((LabelNodeMenu*)(o->parent()->user_data()))->cb_mTextEditor_i(o,v);
}

inline void LabelNodeMenu::cb_Done_i(fltk::Button*, void*) {
  mMenuWindow->destroy();
}
void LabelNodeMenu::cb_Done(fltk::Button* o, void* v) {
  ((LabelNodeMenu*)(o->parent()->user_data()))->cb_Done_i(o,v);
}
#include "FontMenuWidget.h"

fltk::Window* LabelNodeMenu::createWindow() {
  fltk::Window* w;
   {fltk::Window* o = mMenuWindow = new fltk::Window(250, 280, "Label Node Menu");
    w = o;
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->tooltip("Set label attributes in this window");
    o->begin();
     {fltk::TextEditor* o = mTextEditor = new fltk::TextEditor(35, 10, 200, 18, "Label");
      o->box(fltk::ENGRAVED_BOX);
      o->callback((fltk::Callback*)cb_mTextEditor);
      o->when(fltk::WHEN_CHANGED);
      o->tooltip("Text to be displayed by the node");
    }
     {fltk::Button* o = new fltk::Button(70, 247, 100, 28, "Done");
      o->callback((fltk::Callback*)cb_Done);
    }
     {fltk::Group* o = mFontWidget = new fltk::Group(0, 46, 250, 200, "Text Attributes");
      o->labeltype(fltk::EMBOSSED_LABEL);
      o->textsize(11);
      fltk::Group::current()->resizable(o);
    }
    o->end();
  }
  mTextEditor->text(mNode->text());
  mFontWidget->begin();
  addSubWindow(new FontMenuWidget(mNode,mMenuWindow));
  mFontWidget->end();
  return  w;
}

LabelNodeMenu::LabelNodeMenu(pVisusLabelNode label) : FLTKNodeMenu<pVisusLabelNode>(label) {
  createWindow();
  mMenuWindow->show();
}

LabelNodeMenu::~LabelNodeMenu() {
  //delete mMenuWindow;
  //delete mTextEditor;
}

bool LabelNodeMenu::isActive() {
  return mMenuWindow->active();
}
