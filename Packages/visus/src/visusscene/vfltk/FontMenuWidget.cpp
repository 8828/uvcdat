// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "FontMenuWidget.h"

inline void FontMenuWidget::cb_mFontFile_i(fltk::FileBrowser* o, void*) {
  value().fontFile(((fltk::FileBrowser*)o)->directory());
  commit();
}
void FontMenuWidget::cb_mFontFile(fltk::FileBrowser* o, void* v) {
  ((FontMenuWidget*)(o->parent()->parent()->user_data()))->cb_mFontFile_i(o,v);
}

inline void FontMenuWidget::cb_mFont_i(fltk::Input* o, void*) {
  value().fontFile(((fltk::Input*)o)->text());
  commit();
}
void FontMenuWidget::cb_mFont(fltk::Input* o, void* v) {
  ((FontMenuWidget*)(o->parent()->parent()->user_data()))->cb_mFont_i(o,v);
}

inline void FontMenuWidget::cb_mFontSize_i(fltk::ValueInput* o, void*) {
  value().fontSize(((fltk::ValueInput*)o)->value());
  commit();
}
void FontMenuWidget::cb_mFontSize(fltk::ValueInput* o, void* v) {
  ((FontMenuWidget*)(o->parent()->parent()->user_data()))->cb_mFontSize_i(o,v);
}

inline void FontMenuWidget::cb_mStyle_i(fltk::Choice*, void*) {
  value().fontStyle((VISUS_FONT_STYLE)(mStyle->value()));
  commit();
}
void FontMenuWidget::cb_mStyle(fltk::Choice* o, void* v) {
  ((FontMenuWidget*)(o->parent()->parent()->user_data()))->cb_mStyle_i(o,v);
}

inline void FontMenuWidget::cb_Font_i(fltk::Button*, void*) {
  float r,g,b;
  fltk::color_chooser("FontColor",r,g,b);
  value().fontColor(255*r,255*g,255*b);
  fprintf(stderr,"%f  %f  %f\n",r,g,b);
  commit();
}
void FontMenuWidget::cb_Font(fltk::Button* o, void* v) {
  ((FontMenuWidget*)(o->parent()->parent()->user_data()))->cb_Font_i(o,v);
}

FontMenuWidget::FontMenuWidget(pVisusGroup node,fltk::Window* parent) : SharedValueMenu<VisusFont>(node,parent) {
  createMenu(parent);
}

FontMenuWidget::FontMenuWidget(VisusFont& font,fltk::Window* parent) : SharedValueMenu<VisusFont>(font,parent) {
  createMenu(parent);
}

FontMenuWidget::~FontMenuWidget() {
}

FLTKSubWindow* FontMenuWidget::createMenu(fltk::Window* parent) {
  FLTKSubWindow* w;
   {FLTKSubWindow* o = mMenu = new FLTKSubWindow(250, 200);
    w = o;
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = mBase = new fltk::Group(5, 0, 240, 200);
      o->begin();
       {fltk::FileBrowser* o = mFontFile = new fltk::FileBrowser(0, 32, 240, 120);
        o->labelfont(fltk::HELVETICA_BOLD);
        o->labelsize(11);
        o->textsize(11);
        o->callback((fltk::Callback*)cb_mFontFile);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::Input* o = mFont = new fltk::Input(35, 2, 200, 25, "Font");
        o->labelfont(fltk::HELVETICA_BOLD);
        o->textsize(11);
        o->callback((fltk::Callback*)cb_mFont);
        o->when(fltk::WHEN_ENTER_KEY_ALWAYS);
      }
       {fltk::ValueInput* o = mFontSize = new fltk::ValueInput(5, 168, 48, 24, "Font Size");
        o->maximum(99);
        o->step(1);
        o->callback((fltk::Callback*)cb_mFontSize);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::Choice* o = mStyle = new fltk::Choice(75, 168, 72, 24, "Font Style");
        o->callback((fltk::Callback*)cb_mStyle);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
        o->begin();
        new fltk::Item("Bitmap");
        new fltk::Item("Pixmap");
        new fltk::Item("Outline");
        new fltk::Item("Polygon");
        new fltk::Item("Extrude");
        new fltk::Item("Texture");
        o->end();
      }
       {fltk::Button* o = new fltk::Button(160, 167, 65, 25, "Font Color");
        o->callback((fltk::Callback*)cb_Font);
        o->align(fltk::ALIGN_INSIDE);
      }
      o->end();
      fltk::Group::current()->resizable(o);
    }
    o->end();
    o->set_non_modal();
  }
  mFontFile->filter("*.ttf");
  mFontFile->load(VISUS_FONTDIR);
  mFont->text(VISUS_FONT_FILE);
  mFont->position(mFont->line_end(0));
  mStyle->value(value().fontStyle());
  mFontSize->value(value().fontSize());
  mMenu->show_inside(parent);
  return  w;
}
