########################################################################
#
# Copyright (c) 2008, Lawrence Livermore National Security, LLC.  
# Produced at the Lawrence Livermore National Laboratory  
# Written by bremer5@llnl.gov,pascucci@sci.utah.edu.  
# LLNL-CODE-406031.  
# All rights reserved.  
#   
# This file is part of "Simple and Flexible Scene Graph Version 2.0."
# Please also read BSD_ADDITIONAL.txt.
#   
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   
# @ Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the disclaimer below.
# @ Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the disclaimer (as noted below) in
#   the documentation and/or other materials provided with the
#   distribution.
# @ Neither the name of the LLNS/LLNL nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#   
#  
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE
# LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING
#
########################################################################


#==============================================================
#  When this file is included in a CMakeLists.txt file, the
#  pathConfig.py script for setup.py will be generated.
#==============================================================
SET(VISUS_PYTHON ${CMAKE_CURRENT_SOURCE_DIR})

SET(PY_CONFIG ${VISUS_PYTHON}/pathConfig.py)
SET_SOURCE_FILES_PROPERTIES(${PY_CONFIG} GENERATED)

# Remove Previous Existing Packages File
FILE(REMOVE ${PY_CONFIG})

# Write Header Portion of Packages File
FILE(WRITE ${PY_CONFIG} "\#****************************************************************************\n")
FILE(WRITE ${PY_CONFIG} "\#****** This File Is Auto-Generated By CMAKE by config/SWIGConfig.cmake \n")
FILE(WRITE ${PY_CONFIG} "\#****************************************************************************\n")

# Import the modules needed to find and construct the site-packages path
FILE(APPEND ${PY_CONFIG} "from sys import prefix, version\n")
FILE(APPEND ${PY_CONFIG} "import os\n\n")
FILE(APPEND ${PY_CONFIG} "from os.path import join\n")
FILE(APPEND ${PY_CONFIG} "from setupSupport import *\n\n")

FILE(APPEND ${PY_CONFIG} "CMAKE_CXX_COMPILER = \"${CMAKE_CXX_COMPILER}\"\n\n")
FILE(APPEND ${PY_CONFIG} "CMAKE_BUILD_TYPE = \"${CMAKE_BUILD_TYPE}\"\n\n")

#FILE(APPEND ${PY_CONFIG} "\# --- Python Variables --- \n")
#FILE(APPEND ${PY_CONFIG} "PYTHON_LIBRARY = \"${PYTHON_LIBRARY}\"\n\n")
#FILE(APPEND ${PY_CONFIG} "PYTHON_DEBUG_LIBRARY = \"${PYTHON_DEBUG_LIBRARY}\"\n\n")
#FILE(APPEND ${PY_CONFIG} "PYTHON_SITE_PACKAGE = [join(prefix,'lib','python'+version[:3],'site-packages')]\n\n")

FILE(APPEND ${PY_CONFIG} "VISUS_LIBDIR = \"${VISUS_LIBRARIES}\"\n\n")

FILE(APPEND ${PY_CONFIG} "\# --- Include files --- \n")
FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES = []\n")
FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${VISUS_SRC}/visusscene\")\n")
FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${VISUS_SRC}/glew\")\n")
FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${VISUS_SRC}/xmlParser\")\n")

IF (VISUS_ENABLE_IDX)
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${VISUS_SRC}/visus3d\")\n")
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${ZLIB_INCLUDE_DIR}\")\n")
ENDIF (VISUS_ENABLE_IDX)

FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${OPENGL_INCLUDE_DIR}\")\n")
FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${OPENGL_INCLUDE_DIR}/GL\")\n")

IF (VISUS_ENABLE_FTGL)
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${FTGL_INCLUDE_DIR}\")\n")
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${FREETYPE2_INCLUDE_DIR}\")\n")
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${FREETYPE2_FT2BUILD}\")\n")
ENDIF (VISUS_ENABLE_FTGL)

IF (VISUS_ENABLE_PTHREADS)
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${PTHREAD_INCLUDE_DIR}\")\n")
ENDIF (VISUS_ENABLE_PTHREADS)

IF (VISUS_ENABLE_FLTK) 
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${FLTK2_INCLUDE_DIR}\")\n")
ENDIF (VISUS_ENABLE_FLTK) 

IF (VISUS_OFFSCREEN_RENDERING STREQUAL "OSMESA")
   FILE(APPEND ${PY_CONFIG} "VISUS_INCLUDES.append(\"${OSMESA_INCLUDE_DIR}\")\n")
ENDIF (VISUS_OFFSCREEN_RENDERING STREQUAL "OSMESA")

FILE(APPEND ${PY_CONFIG} "\n\n")

SET(VISUS_EXT_LIBRARIES
        ${OPENGL_LIBRARIES}
        ${GLUT_LIBRARIES}
)

IF (VISUS_ENABLE_IDX)
   SET(VISUS_EXT_LIBRARIES
       ${VISUS_EXT_LIBRARIES}
       ${ZLIB_LIBRARIES}
   )
ENDIF (VISUS_ENABLE_IDX)
       
IF (VISUS_ENABLE_PTHREADS)
   SET(VISUS_EXT_LIBRARIES
       ${VISUS_EXT_LIBRARIES}
       ${PTHREAD_LIBRARIES}
   )
ENDIF (VISUS_ENABLE_PTHREADS)


IF (VISUS_ENABLE_FTGL)
   SET(VISUS_EXT_LIBRARIES
       ${VISUS_EXT_LIBRARIES}
       ${FTGL_LIBRARIES}
       ${FREETYPE2_LIBRARIES}
   )
ENDIF (VISUS_ENABLE_FTGL)


IF (VISUS_ENABLE_FLTK) 
   SET(VISUS_EXT_LIBRARIES
       ${VISUS_EXT_LIBRARIES}
       ${FLTK2_LIBRARIES}
   )
ENDIF (VISUS_ENABLE_FLTK) 


SET(VISUS_INTERNAL_LIBRARIES
        visusscene-shared
        contour-shared
        glew-shared
        xmlParser-shared
)

IF (VISUS_ENABLE_IDX)
   SET(VISUS_INTERNAL_LIBRARIES
       ${VISUS_INTERNAL_LIBRARIES}
       visus3d-shared
   )
ENDIF (VISUS_ENABLE_IDX)

FILE(APPEND ${PY_CONFIG} "\# --- Assemble the Internal Libraries ---\n")
FILE(APPEND ${PY_CONFIG} "VISUS_INTERNAL_LIBRARIES = []\n")
FOREACH(VAR ${VISUS_INTERNAL_LIBRARIES})
    GET_TARGET_PROPERTY(VISUS_LIB ${VAR} LOCATION)
    FILE(APPEND ${PY_CONFIG} "VISUS_INTERNAL_LIBRARIES.append(\"${VISUS_LIB}\")\n")
ENDFOREACH(VAR)

FILE(APPEND ${PY_CONFIG} "\n\n\# --- Assemble the External Libraries ---\n")
FILE(APPEND ${PY_CONFIG} "VISUS_EXTERNAL_LIBRARIES = []\n")
FOREACH(VAR ${VISUS_EXT_LIBRARIES})
    FILE(APPEND ${PY_CONFIG} "VISUS_EXTERNAL_LIBRARIES.append(\"${VAR}\")\n")
ENDFOREACH(VAR)

FILE(APPEND ${PY_CONFIG} "\n\n\# --- Assemble the Static Libraries ---\n")
FILE(APPEND ${PY_CONFIG} "VISUS_STATIC_LIBRARIES = []\n")
FILE(APPEND ${PY_CONFIG} "VISUS_STATIC_LIBRARIES.extend(VISUS_INTERNAL_LIBRARIES)\n")

FILE(APPEND ${PY_CONFIG} "for library in VISUS_EXTERNAL_LIBRARIES:\n")
FILE(APPEND ${PY_CONFIG} "  VISUS_STATIC_LIBRARIES += extractStaticLibs(library)\n")

FILE(APPEND ${PY_CONFIG} "\n\n\# --- Assemble the Dynamic Libraries ---\n")
FILE(APPEND ${PY_CONFIG} "VISUS_DYNAMIC_LIBRARIES = []\n")
FILE(APPEND ${PY_CONFIG} "for library in VISUS_EXTERNAL_LIBRARIES:\n")
FILE(APPEND ${PY_CONFIG} "  VISUS_DYNAMIC_LIBRARIES += extractDynamicLibs(library)\n")

FILE(APPEND ${PY_CONFIG} "\n\n")
FILE(APPEND ${PY_CONFIG} "\# --- Runtime Library Directory ---\n")

FILE(APPEND ${PY_CONFIG} "VISUS_LIBRARY_DIR = [\"${VISUS_LIBRARIES}\"]\n")

FILE(APPEND ${PY_CONFIG} "\n\n")
FILE(APPEND ${PY_CONFIG} "\# --- Additional Compile Flags ---\n")

FILE(APPEND ${PY_CONFIG} "VISUS_COMPILE_FLAGS = parseMacros(\"${ADDITIONAL_COMPILE_FLAGS}\")\n")

FILE(APPEND ${PY_CONFIG} "\n\# --- Module Names And SmartPointer Base Classes ---\n")
FILE(APPEND ${PY_CONFIG} "VISUS_PY_PACKAGES=[]\n")
FILE(APPEND ${PY_CONFIG} "VISUS_SP_BASES=[]\n")


# ================================================================
# This macro sets the names for base Smart Pointer types 
# ================================================================
MACRO(SWIGSPBases BASE_NAMES)
  FOREACH(BASE_NAME ${BASE_NAMES})
    FILE(APPEND ${PY_CONFIG} "VISUS_SP_BASES.append(\"${BASE_NAME}\")\n" )  
  ENDFOREACH(BASE_NAME)
ENDMACRO(SWIGSPBases BASE_NAMES)


# ================================================================
# This macro creates the SWIG interface file for given module name
# and appends the module file to the list of all packages
# ================================================================
MACRO(SWIGGenerate MODULE FILES DEPENDS)
   SET(MODULE_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${MODULE}.i)
   SET(WRAP_FILE ${CMAKE_CURRENT_BINARY_DIR}/${MODULE}_wrap.cpp)

   SET_SOURCE_FILES_PROPERTIES(${MODULE_FILE} GENERATED)
   SET_SOURCE_FILES_PROPERTIES(${WRAP_FILE} GENERATED)

   FILE(APPEND ${PY_CONFIG} "VISUS_PY_PACKAGES.append(\"${MODULE}\")\n")

   # Remove Previous Existing Files
   FILE(REMOVE ${MODULE_FILE})
   FILE(REMOVE ${WRAP_FILE})

   # Check If VisusArrays Is Included
   SET(ARRAYS_INC 0)
   FOREACH(SWIG_SOURCE ${FILES})
      IF (${SWIG_SOURCE} MATCHES "VisusArrays.i")
		SET(ARRAYS_INC 1)
      ENDIF (${SWIG_SOURCE} MATCHES "VisusArrays.i")
   ENDFOREACH(SWIG_SOURCE)

   # Generate Module File 
   FILE(WRITE ${MODULE_FILE} "//****** This File Is Auto-Generated By CMAKE          *****\n" )
   FILE(APPEND ${MODULE_FILE} "//****** To Add More Files To List Edit CMakeLists.txt *****\n" )
   FILE(APPEND ${MODULE_FILE} "%module ${MODULE}\n" )
   FILE(APPEND ${MODULE_FILE} "%pythoncode %{\n" )
   FILE(APPEND ${MODULE_FILE} "import _${MODULE} as cppModule\n" )
   FILE(APPEND ${MODULE_FILE} "%}\n" )
   FILE(APPEND ${MODULE_FILE} "%{\n" )
   FILE(APPEND ${MODULE_FILE} "#define SWIG_MAKE 1\n" )
   FILE(APPEND ${MODULE_FILE} "#include \"VisusSmartPointerTypeMaps.h\"\n")
   FILE(APPEND ${MODULE_FILE} "%}\n\n" )
   FILE(APPEND ${MODULE_FILE} "// Fore-go wrapping of lower-level XML inteface\n" )
   FILE(APPEND ${MODULE_FILE} "%ignore toXML;\n" )
   FILE(APPEND ${MODULE_FILE} "%ignore fromXML;\n\n" )
	
   IF (NOT ${ARRAYS_INC})
       FILE(APPEND ${MODULE_FILE} "%include \"VisusArrays.h\"\n" )  
   ENDIF (NOT ${ARRAYS_INC})

   FILE(APPEND ${MODULE_FILE} "%include \"VisusSmartPointerTypeMapsFuncs.i\"\n" )  

   FOREACH(SWIG_MODULE ${DEPENDS})
     FILE(APPEND ${MODULE_FILE} "%import \"${SWIG_MODULE}.i\"\n" )  
   ENDFOREACH(SWIG_MODULE)
   
   FOREACH(SWIG_SOURCE ${FILES})
     FILE(APPEND ${MODULE_FILE} "%include \"${SWIG_SOURCE}\"\n" )  
   ENDFOREACH(SWIG_SOURCE)
   FILE(APPEND ${MODULE_FILE} "\n" )

ENDMACRO(SWIGGenerate MODULE FILES)

